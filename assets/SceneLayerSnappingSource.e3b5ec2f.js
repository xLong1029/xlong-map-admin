import{e as i,y as s,b as y,p as _,iL as f,y7 as k,y8 as m,hs as C,ak as v,aC as b,cm as L,yf as H,i as g,kp as w,eN as E,f3 as O,d as I,a4 as R,r as V}from"./index.a33ecea7.js";import{r as $}from"./VertexSnappingCandidate.63f00b1a.js";let d=class extends _{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new P(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:a}=e,n=j;this.renderCoordsHelper.toRenderCoords(a,r.spatialReference,n);const h=e.distance,c=typeof h=="number"?h:h.distance,p=await this._workerHandle.invoke({bounds:f(n[0],n[1],n[2],c),types:e.types},t);return p.candidates.sort((u,S)=>u.distance-S.distance),p.candidates.map(u=>this._convertCandidate(r,u))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new k({objectId:t.objectId,targetPoint:this._convertRenderCoordinate(e,t.target),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new $({objectId:t.objectId,targetPoint:this._convertRenderCoordinate(e,t.target),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=v();return this.renderCoordsHelper.fromRenderCoords(t,r,e),m(r)}async _fetchAllEdgeLocations(e,t){const r=[],a=[];for(const{id:n,uid:h}of e.components)this._ids.has(n)&&r.push((async()=>{const c=await this.fetchEdgeLocations(n,t.signal),p=c.locations.buffer;return a.push(p),{id:n,uid:h,objectIds:c.objectIds,locations:p,origin:c.origin,type:c.type}})());return{result:{components:(await Promise.all(r)).filter(({id:n})=>this._ids.has(n))},transferList:a}}};i([s({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),i([s({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),i([s({constructOnly:!0})],d.prototype,"schedule",void 0),i([s({readOnly:!0})],d.prototype,"availability",void 0),d=i([y("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],d);class P extends C{constructor(t,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:r})}}const j=v();let o=class extends _{get updating(){return this.updatingHandles.updating}constructor(e){super(e),this.availability=1,this._abortController=new AbortController}destroy(){this._tracker=b(this._tracker),this._abortController=L(this._abortController)}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new H(r=>t.immediate.schedule(r)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:r=>t.immediate.schedule(r),fetchEdgeLocations:async(r,a)=>{if(g(this._tracker))throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,a)}}),this.updatingHandles.addPromise(this._setupLayerView()),this.handles.add([w(this._workerHandle),w(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){if(this.destroyed)return;const e=E(this._abortController,r=>r.signal),t=await this.getLayerView();g(t)||O(e)||(this._tracker=t.trackSnappingSources({add:(r,a)=>{this.updatingHandles.addPromise(this._workerHandle.add({id:r,bounds:a},e))},remove:r=>{this.updatingHandles.addPromise(this._workerHandle.remove({id:r},e))}}))}};i([s({constructOnly:!0})],o.prototype,"getLayerView",void 0),i([s({constructOnly:!0})],o.prototype,"view",void 0),i([s({readOnly:!0})],o.prototype,"updating",null),i([s({readOnly:!0})],o.prototype,"availability",void 0),o=i([y("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],o);let l=class extends I{get updating(){return this._i3sSources.some(e=>e.updating)}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(e=>e.destroy()),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources=t.type==="building-scene"?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map(a=>a.fetchCandidates(e,t)));return R(t),r.flat()}refresh(){this._i3sSources.forEach(e=>e.refresh())}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map(r=>r.type==="building-component"?new o({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null).filter(V)}_getSceneLayerI3SSource(e,t){return new o({getLayerView:async()=>{const r=await e.whenLayerView(t);return r.type==="scene-layer-graphics-3d"?void 0:r},view:e})}};i([s({constructOnly:!0})],l.prototype,"layerSource",void 0),i([s({constructOnly:!0})],l.prototype,"view",void 0),i([s({readOnly:!0})],l.prototype,"updating",null),i([s({readOnly:!0})],l.prototype,"availability",void 0),l=i([y("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],l);export{l as SceneLayerSnappingSource};
