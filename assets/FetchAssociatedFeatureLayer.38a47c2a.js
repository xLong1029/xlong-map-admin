import{i as l,r as _,by as h,pJ as p,dk as u,he as f,fS as g,eW as w}from"./index.a33ecea7.js";class P{constructor(r,t,e,a){var s;this._parsedUrl=r,this._portalItem=t,this._apiKey=e,this.signal=a,this._rootDocument=null;const n=(s=this._parsedUrl)==null?void 0:s.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);n&&(this._urlParts={root:n[1],layerId:parseInt(n[2],10)})}async fetch(){var e;if(!this._urlParts)return null;const r=(e=this._portalItem)!=null?e:await this._portalItemFromServiceItemId();if(l(r))return this._loadFromUrl();const t=await this._findAndLoadRelatedPortalItem(r);return l(t)?null:this._loadFeatureLayerFromPortalItem(t)}async fetchPortalItem(){var t;if(!this._urlParts)return null;const r=(t=this._portalItem)!=null?t:await this._portalItemFromServiceItemId();return l(r)?null:this._findAndLoadRelatedPortalItem(r)}async _fetchRootDocument(){if(_(this._rootDocument))return this._rootDocument;if(l(this._urlParts))return this._rootDocument={},{};const r={query:{f:"json",token:this._apiKey},responseType:"json",signal:this.signal},t=`${this._urlParts.root}/SceneServer`;try{const e=await h(t,r);this._rootDocument=e.data}catch{this._rootDocument={}}return this._rootDocument}async _fetchServiceOwningPortalUrl(){var a,n;const r=(a=this._parsedUrl)==null?void 0:a.path,t=r?(n=p)==null?void 0:n.findServerInfo(r):null;if(t!=null&&t.owningSystemUrl)return t.owningSystemUrl;const e=r?r.replace(/(.*\/rest)\/.*/i,"$1")+"/info":null;try{const s=(await h(e,{query:{f:"json"},responseType:"json",signal:this.signal})).data.owningSystemUrl;if(s)return s}catch(s){u(s)}return null}async _findAndLoadRelatedPortalItem(r){try{return(await r.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:this.signal})).find(t=>t.type==="Feature Service")||null}catch(t){return u(t),null}}async _loadFeatureLayerFromPortalItem(r){var e;await r.load({signal:this.signal});const t=await this._findMatchingAssociatedSublayerUrl((e=r.url)!=null?e:"");return new f({url:t,portalItem:r}).load({signal:this.signal})}async _loadFromUrl(){var t;const r=await this._findMatchingAssociatedSublayerUrl(`${(t=this._urlParts)==null?void 0:t.root}/FeatureServer`);return new f({url:r}).load({signal:this.signal})}async _findMatchingAssociatedSublayerUrl(r){var m;const t=r.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1"),e={query:{f:"json"},responseType:"json",authMode:"no-prompt",signal:this.signal},a=(m=this._urlParts)==null?void 0:m.layerId,n=this._fetchRootDocument(),s=h(t,e),[d,y]=await Promise.all([s,n]),c=y&&y.layers,i=d.data&&d.data.layers;if(!Array.isArray(i))throw new Error("expected layers array");if(Array.isArray(c)){for(let o=0;o<Math.min(c.length,i.length);o++)if(c[o].id===a)return`${t}/${i[o].id}`}else if(a!=null&&a<i.length)return`${t}/${i[a].id}`;throw new Error("could not find matching associated sublayer")}async _portalItemFromServiceItemId(){const r=(await this._fetchRootDocument()).serviceItemId;if(!r)return null;const t=new g({id:r,apiKey:this._apiKey}),e=await this._fetchServiceOwningPortalUrl();_(e)&&(t.portal=new w({url:e}));try{return t.load({signal:this.signal})}catch(a){return u(a),null}}}export{P as l};
