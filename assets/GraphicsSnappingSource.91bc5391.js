import{cH as b,d as E,r as d,h as _,y4 as k,w as F,az as $,gL as C,a4 as c,ye as A,yd as G,n as P,i as h,co as R,rV as x,v as I,jG as m,a$ as H,h$ as O,eP as z,a0 as Z,i_ as L,e as r,y as l,b as M,iE as W,ht as j}from"./index.a33ecea7.js";import{p as q}from"./normalizeUtilsSync.a99dd2fa.js";import{g as T}from"./FeatureStore.b2caf56c.js";import{e as B}from"./QueryEngine.c2c9f6b5.js";import{i as V,p as D}from"./queryEngineUtils.e7268e90.js";import{r as f,a as J,n as v}from"./symbologySnappingCandidates.fd2b48f0.js";import"./BoundsStore.499f4d64.js";import"./PooledRBush.efdefeda.js";import"./optimizedFeatureQueryEngineAdapter.19cbae31.js";import"./centroid.5ec46060.js";import"./QueryEngineCapabilities.a5e1050d.js";import"./timeSupport.2b30b818.js";import"./VertexSnappingCandidate.63f00b1a.js";const S="graphics-collections";let o=class extends b(E){get updating(){return this.updatingHandles.updating}get _hasZ(){const e=this.view;return d(e)&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,s=d(e)&&e.type==="3d";if(!s||t.type==="map-notes")return f();const i=async(n,a)=>(await W(e.whenLayerView(t),a)).elevationAlignPointsInFeatures(n,a);return f(s,{elevationInfo:t.elevationInfo,alignPointsInFeatures:i,spatialReference:e.spatialReference})}get _snappingElevationFilter(){const{view:e}=this,t=d(e)&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes";return J(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,s=d(e)&&e.type==="3d",i=this._extrudedPolygonSymbolsCount>0;return s&&t.type!=="map-notes"&&i?v(i,async(n,a)=>{const p=await e.whenLayerView(t);return c(a),p.queryForSymbologySnapping({candidates:n,spatialReference:e.spatialReference},a)}):v()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources(e=>this._destroySource(e))}initialize(){this.updatingHandles.add(()=>this.getGraphicsLayers(),s=>{this.updatingHandles.removeHandles(S);for(const i of s)this._addMany(i.graphics.toArray()),this.handles.add([i.on("graphic-update",n=>this._onGraphicUpdate(n)),this.updatingHandles.addOnCollectionChange(()=>i.graphics,n=>this._onGraphicsChanged(n))],S)},_);const{view:e}=this,{layer:t}=this.layerSource;d(e)&&e.type==="3d"&&t.type!=="map-notes"&&this.addHandles([e.elevationProvider.on("elevation-change",({context:s})=>{k(s,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),F(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),_),$(()=>t,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(e,t){const{point:s}=e,i=await C(this._mapSources(p=>this._fetchCandidatesForSource(p,e,t)));c(t);const n=this._getGroundElevation,a=i.flat().map(p=>V(p,n));return A(s,a),a}get _getGroundElevation(){return D(this.view)}async _fetchCandidatesForSource(e,t,s){var y,g;const i=G(t,(g=(y=P(this.view))==null?void 0:y.type)!=null?g:"2d"),n=await e.queryEngine.executeQueryForSnapping(i,s);c(s);const a=await this._snappingElevationAligner.alignCandidates(n.candidates,s);c(s);const p=await this._symbologySnappingFetcher.fetch(a,s);c(s);const w=p.length===0?a:[...a,...p];return this._snappingElevationFilter.filter(i,w)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some(t=>t.graphics.includes(e.graphic)))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],s=new Map;for(const i of e)h(i.geometry)||(this._needsInitializeProjection(i.geometry.spatialReference)?(t.push(i.geometry.spatialReference),s.set(i.uid,i)):this._add(i));this._createPendingAdd(t,s)}_createPendingAdd(e,t){if(!e.length)return;const s=R(async a=>{await x(e.map(p=>({source:p,dest:this.spatialReference})),{signal:a}),this._markLoadedSpatialReferences(e);for(const[,p]of t)this._add(p)});this.updatingHandles.addPromise(s.promise);const i={task:s,graphics:t},n=()=>j(this._pendingAdds,i);s.promise.then(n,n),this._pendingAdds.push(i)}_markLoadedSpatialReferences(e){for(const t of e)t.wkid!=null&&this._loadedWkids.add(t.wkid),t.wkt!=null&&this._loadedWkts.add(t.wkt)}_add(e){if(h(e.geometry)||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=I.fromExtent(t));const s=this._ensureSource(t.type);if(h(s))return;const i=this._createOptimizedFeature(e.uid,t);h(i)||(s.featureStore.add(i),m(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){return(e.wkid==null||!this._loadedWkids.has(e.wkid))&&(e.wkt==null||!this._loadedWkts.has(e.wkt))&&!H(e,this.spatialReference)}_createOptimizedFeature(e,t){const s=O(q(t),this.spatialReference);if(!s)return null;const i=this._ensureGeometryHasZ(s),n=z(i,this._hasZ,!1);return new Z(n,{[u]:e},null,e)}_ensureGeometryHasZ(e){var i;if(!this._hasZ)return e;const t=n=>{for(;n.length<3;)n.push(0)},s=e.clone();switch(s.hasZ=!0,s.type){case"point":s.z=(i=s.z)!=null?i:0;break;case"multipoint":s.points.forEach(t);break;case"polyline":s.paths.forEach(n=>n.forEach(t));break;case"polygon":s.rings.forEach(n=>n.forEach(t))}return s}_ensureSource(e){const t=this._sources[e];if(d(t))return t;const s=this._createSource(e);return this._sources[e]=s,s}_createSource(e){const t=L.toJSON(e),s=this._hasZ,i=new T({geometryType:t,hasZ:s,hasM:!1});return{featureStore:i,queryEngine:new B({featureStore:i,fields:[{name:u,type:"esriFieldTypeOID",alias:u}],geometryType:t,hasM:!1,hasZ:s,objectIdField:u,spatialReference:this.spatialReference,scheduler:d(this.view)&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources(t=>this._removeFromSource(t,e));for(const t of this._pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}_removeFromSource(e,t){const s=t.uid;e.featureStore.has(s)&&(e.featureStore.removeById(t.uid),m(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:s,polyline:i,multipoint:n}=this._sources,a=[];return d(t)&&a.push(e(t)),d(s)&&a.push(e(s)),d(i)&&a.push(e(i)),d(n)&&a.push(e(n)),a}};r([l()],o.prototype,"getGraphicsLayers",void 0),r([l({constructOnly:!0})],o.prototype,"layerSource",void 0),r([l({constructOnly:!0})],o.prototype,"spatialReference",void 0),r([l({constructOnly:!0})],o.prototype,"view",void 0),r([l({readOnly:!0})],o.prototype,"updating",null),r([l({readOnly:!0})],o.prototype,"availability",void 0),r([l()],o.prototype,"_hasZ",null),r([l()],o.prototype,"_snappingElevationAligner",null),r([l()],o.prototype,"_snappingElevationFilter",null),r([l()],o.prototype,"_symbologySnappingFetcher",null),r([l()],o.prototype,"_extrudedPolygonSymbolsCount",void 0),r([l()],o.prototype,"_getGroundElevation",null),o=r([M("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],o);const u="OBJECTID";export{o as GraphicsSnappingSource};
