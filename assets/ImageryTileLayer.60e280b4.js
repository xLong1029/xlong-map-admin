import{g0 as ft,lH as me,r as k,tg as tt,ae as Be,aD as $,g6 as it,aR as j,ap as G,i as D,n as X,by as st,dx as dt,sn as rt,cv as mt,e as w,y as b,p_ as nt,b as Q,g5 as pt,dj as q,c$ as yt,i3 as at,aF as ot,a7 as gt,cw as xt,th as It,dl as wt,eX as bt,ti as St,sj as Rt,sk as vt,pU as Tt,pV as _t,sF as Ft,sI as kt,pT as Ct,sl as Pt,pW as Mt,dk as $t,k0 as de,hf as Ot,w as Dt,ha as Bt,hk as Et,sO as zt,hj as Jt,g7 as Nt,A as Ht}from"./index.a33ecea7.js";import{c as Lt,w as $e,l as lt,$ as Ne,S as He,V as At,L as Wt,j as Le,n as jt,m as qt,a as Gt,o as Ut,d as Vt}from"./fetchRasterInfo.43be0979.js";import{g as ct,y as Xt,a as Yt,s as Kt,p as ut,h as Ae,m as Qt,d as We,v as Zt}from"./multidimensionalUtils.f078a6da.js";import{S as ei,f as pe,T as ti,r as je,u as ye,p as ii,i as Ee,j as si,l as ri,q as ni,N as ai,U as oi,R as li,s as Ie,B as ci,L as ui,D as hi}from"./RasterSymbolizer.afc78370.js";import{a as qe,x as Ge,h as Ue,d as fi,m as di}from"./RawBlockCache.57e4e6c1.js";import{u as mi}from"./pixelRangeUtils.e796cb74.js";import{b as _e,c as pi,e as yi,f as gi,w as xi,d as Ii,g as wi,R as bi,S as Si,m as Ri}from"./dataUtils.bc7551b7.js";import{T as Ve,U as we,j as Xe,o as Ye,n as vi,Q as Fe,J as ke,$ as Ti,V as _i,C as Fi}from"./rasterProjectionHelper.599a6959.js";import{C as Oe,f as ki,i as Ci,m as ze,c as Pi,h as Mi}from"./utils.c51cda16.js";const Ke=8,$i=256;let U=class extends ft(pt){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=Ve();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:me.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=we(e.spatialReference);return k(t)&&e.extent.width>=t/2}set url(e){this._set("url",tt(e,Be.getLogger(this.declaredClass)))}async open(e){throw new $("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,r,i={}){const s=i.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(e,t,r,s);return this.fetchPixels(n,s.size[0],s.size[1],i)}async identify(e,t={}){var P,M;e=it(j,e).clone().normalize();const{multidimensionalDefinition:r,timeExtent:i}=t,{rasterInfo:s}=this,{hasMultidimensionalTranspose:n,multidimensionalInfo:a}=s;let{transposedVariableName:l}=t;const o=k(a)&&n&&(i!=null||ct(r));o&&!l&&(l=k(r)&&r.length>0?(P=r[0].variableName)!=null?P:void 0:a.variables[0].name,t={...t,transposedVariableName:l}),t=this._getRequestOptionsWithSliceId(t);const{spatialReference:c,extent:u}=s,{datumTransformation:h}=t;let f=Xe(e,c,h);if(!u.intersects(f))return{location:f,value:null};if(k(s.transform)){const B=s.transform.inverseTransform(f);if(!s.nativeExtent.intersects(B))return{location:B,value:null};f=B}let m=0;const y=k(l)&&k(a)&&s.hasMultidimensionalTranspose;if(this.datasetFormat==="Function"){const B=this.primaryRasters.rasters[0];if(y)return B.identify(f,t);const{pixelSize:N}=s,O=3,H=N.x*O/2,L=N.y*O/2,J=new G({xmin:f.x-H,xmax:f.x+H,ymin:f.y-L,ymax:f.y+L,spatialReference:c}),A={interpolation:"nearest"},{pixelBlock:E}=await B.fetchPixels(J,O,O,A),{pixelBlock:Z}=await this.fetchPixels(J,O,O,A);if(D(E))return{location:f,value:null};const te=Math.floor(O*O*.5),ge=!E.mask||E.mask[te]?E.pixels.map(Te=>Te[te]):null;let xe;return k(Z)&&(xe=!Z.mask||Z.mask[te]?Z.pixels.map(Te=>Te[te]):void 0),{location:f,value:ge,processedValue:xe,pyramidLevel:0}}if(!y){if(t.srcResolution)m=Ye(t.srcResolution,s,this.ioConfig.sampling).pyramidLevel;else if(m=await this.computeBestPyramidLevelForLocation(e,t),m==null)return{location:f,value:null}}const g=this.identifyPixelLocation(f,m,null,y);if(g===null)return{location:f,value:null};const{row:d,col:p,rowOffset:I,colOffset:x,blockWidth:F}=g,T=l!=null?l:X(t.sliceId),_=qe(this.url,T),S=`${m}/${d}/${p}`;let C=Ge(_,null,S);D(C)&&(C=this.fetchRawTile(m,d,p,t),Ue(_,null,S,C));const R=await C;if(D(R)||!((M=R.pixels)!=null&&M.length))return{location:f,value:null};const v=I*F+x;return this._processIdentifyResult(R,{srcLocation:f,position:v,pyramidLevel:m,useTransposedTile:!!y,requestSomeSlices:o,identifyOptions:t})}async fetchPixels(e,t,r,i={}){if(e=vi(e),(i=this._getRequestOptionsWithSliceId(i)).requestRawData)return this._fetchPixels(e,t,r,i);const s=we(e.spatialReference),n=Fe(e);if(D(s)||n===0||n===1&&this._isGlobalWrappableSource)return this._fetchPixels(e,t,r,i);if(n>=3)return{extent:e,pixelBlock:null};const a=[],{xmin:l,xmax:o}=e,c=Math.round(s/(o-l)*t),u=c-Math.round((s/2-l)/(o-l)*t);let h=0;const f=[];for(let d=0;d<=n;d++){const p=new G({xmin:d===0?l:-s/2,xmax:d===n?o-s*d:s/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),I=d===0?c-u:d===n?t-h:c;h+=I,f.push(I);const x=i.disableWrapAround&&d>0?null:this._fetchPixels(p,I,r,i);a.push(x)}const m=(await Promise.all(a)).map(d=>d==null?void 0:d.pixelBlock);let y=null;const g={width:t,height:r};return this.rasterJobHandler?y=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:m,srcMosaicSize:g,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:f},i)).pixelBlock:y=_e(m,g,{blockWidths:f}),{extent:e,srcExtent:ke(e,this.rasterInfo.spatialReference,i.datumTransformation),pixelBlock:y}}async fetchRawPixels(e,t,r,i={}){t={x:Math.floor(t.x),y:Math.floor(t.y)};const s=await this._fetchRawTiles(e,t,r,i),{nativeExtent:n,nativePixelSize:a,storageInfo:l}=this.rasterInfo,o=2**e,c=a.x*o,u=a.y*o,h=new G({xmin:n.xmin+c*t.x,xmax:n.xmin+c*(t.x+r.width-1),ymin:n.ymax-u*(t.y+r.height-1),ymax:n.ymax-u*t.y,spatialReference:n.spatialReference});if(!s)return{extent:h,srcExtent:h,pixelBlock:null};const{pixelBlocks:f,mosaicSize:m}=s;if(f.length===1&&k(f[0])&&f[0].width===r.width&&f[0].height===r.height)return{extent:h,srcExtent:h,pixelBlock:s.pixelBlocks[0]};const y=e>0?l.pyramidBlockWidth:l.blockWidth,g=e>0?l.pyramidBlockHeight:l.blockHeight,d={x:t.x%y,y:t.y%g};let p;return this.rasterJobHandler?p=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:f,srcMosaicSize:m,destDimension:r,clipOffset:d,clipSize:r,coefs:null,sampleSpacing:null,interpolation:i.interpolation,alignmentInfo:null,blockWidths:null},i)).pixelBlock:p=_e(f,m,{clipOffset:d,clipSize:r}),{extent:h,srcExtent:h,pixelBlock:p}}fetchRawTile(e,t,r,i){throw new $("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return ke(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?ei(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,r=0){var o;const{customFetchParameters:i}=this.ioConfig,{range:s,query:n,headers:a}=t;r=(o=r!=null?r:t.retryCount)!=null?o:this.ioConfig.retryCount;const l=s?{Range:`bytes=${s.from}-${s.to}`}:null;try{return await st(e,{...t,query:{...n,...i},headers:{...a,...l}})}catch(c){if(r>0)return r--,this.request(e,t,r);throw c}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;return D(t)||D(e)||e.length===0?null:Xt(e,t)}getTileExtentFromTileInfo(e,t,r,i){const s=dt(i.lodAt(e));return this.getTileExtent({x:s.resolution,y:s.resolution},t,r,i.origin,i.spatialReference,i.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:r,pixelSize:i}=this.rasterInfo;if(!e.tileInfo){const s=[],n=e.maximumPyramidLevel||0;let a=Math.max(i.x,i.y),l=1/.0254*96*a;for(let c=0;c<=n;c++)s.push(new rt({level:n-c,resolution:a,scale:l})),a*=2,l*=2;const o=new j({x:r.xmin,y:r.ymax,spatialReference:t});e.tileInfo=new me({origin:o,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:s}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,r=512,i){const{width:s,height:n,nativeExtent:a,pixelSize:l,spatialReference:o}=e,c=new j({x:a.xmin,y:a.ymax,spatialReference:o});i==null&&(i=Math.max(0,Math.round(Math.log(Math.max(s,n))/Math.LN2-8)));const u=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[l],i);e.storageInfo=new pe({blockWidth:t,blockHeight:r,pyramidBlockWidth:t,pyramidBlockHeight:r,origin:c,firstPyramidLevel:1,maximumPyramidLevel:i,blockBoundary:u})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,r,i,s,n=0,a=2){if(s.length===1&&n>0){s=[...s];let{x:u,y:h}=s[0];for(let f=0;f<n;f++)u*=a,h*=a,s.push({x:u,y:h})}const l=[],{x:o,y:c}=i;for(let u=0;u<s.length;u++){const{x:h,y:f}=s[u];l.push({minCol:Math.floor((e.xmin-o+.1*h)/t/h),maxCol:Math.floor((e.xmax-o-.1*h)/t/h),minRow:Math.floor((c-e.ymax+.1*f)/r/f),maxRow:Math.floor((c-e.ymin-.1*f)/r/f)})}return l}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:r,pyramidScalingFactor:i}=this.rasterInfo.storageInfo;if(e===0)return t;if(k(r)&&r.length)return r[e-1];const s=i**e;return{x:t.x*s,y:t.y*s}}identifyPixelLocation(e,t,r,i){const{spatialReference:s,nativeExtent:n,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:l,origin:o,transposeInfo:c}=a,u=i&&k(c)?c.tileSize[0]:a.blockWidth,h=i&&k(c)?c.tileSize[1]:a.blockHeight,f=Xe(e,s,r);if(!n.intersects(f)||t<0||t>l)return null;const m=this.getPyramidPixelSize(t),{x:y,y:g}=m,d=(o.y-f.y)/g/h,p=(f.x-o.x)/y/u,I=Math.min(h-1,Math.floor((d-Math.floor(d))*h)),x=Math.min(u-1,Math.floor((p-Math.floor(p))*u));return{pyramidLevel:t,row:Math.floor(d),col:Math.floor(p),rowOffset:I,colOffset:x,blockWidth:u,srcLocation:f}}getTileExtent(e,t,r,i,s,n){const[a,l]=n,o=i.x+r*a*e.x,c=o+a*e.x,u=i.y-t*l*e.y,h=u-l*e.y;return new G({xmin:o,xmax:c,ymin:h,ymax:u,spatialReference:s})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,r){const i=this.rasterInfo.storageInfo.blockBoundary[e];return!i||i.maxRow<t||i.maxCol<r||i.minRow>t||i.minCol>r}async _fetchPixels(e,t,r,i={}){let s=Fe(e);if(s>=2)return{extent:e,pixelBlock:null};const n=this._getSourceDataInfo(e,t,r,i),{pyramidLevel:a,pyramidResolution:l,srcResolution:o,srcExtent:c,srcWidth:u,srcHeight:h}=n;if(u===0||h===0)return{extent:e,srcExtent:c,pixelBlock:null};const f=X(this.rasterInfo.transform),m=(f==null?void 0:f.type)==="gcs-shift",y=k(we(e.spatialReference));!m&&y||(s=Fe(n.srcExtent,m));const g=this.rasterInfo.storageInfo,d={x:Math.floor((c.xmin-g.origin.x)/l.x+.1),y:Math.floor((g.origin.y-c.ymax)/l.y+.1)},p=await this._fetchRawTiles(a,d,{width:u,height:h,wrapCount:s},i);if(!p)return{extent:e,srcExtent:c,pixelBlock:null};const I=a>0?g.pyramidBlockWidth:g.blockWidth,x=a>0?g.pyramidBlockHeight:g.blockHeight,F=I===u&&x===h&&d.x%I==0&&d.y%x==0,T=new j({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/r,spatialReference:e.spatialReference}),_=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:S}=i;if(!_&&F&&p.pixelBlocks.length===1&&I===t&&x===r&&o.x===T.x&&o.y===T.y)return{extent:e,srcExtent:c,pixelBlock:p.pixelBlocks[0]};const C=y&&k(we(c.spatialReference)),R=i.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");R&&!this.rasterJobHandler&&await Ve();const v=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:p.extent,pixelSize:T.toJSON(),datumTransformation:S,rasterTransform:f,hasWrapAround:s>0||C,isAdaptive:this.ioConfig.optimizeProjectionAccuracy!==!1,includeGCSGrid:R},i):Ti({projectedExtent:e,srcBufferExtent:p.extent,pixelSize:T,datumTransformation:S,rasterTransform:f,hasWrapAround:s>0||C,isAdaptive:!1,includeGCSGrid:R});let P;const M=!i.requestRawData,B={rows:v.spacing[0],cols:v.spacing[1]},N=X(this._getRasterTileAlignmentInfo(a,p.extent.xmin)),{pixelBlocks:O,mosaicSize:H,isPartiallyFilled:L}=p;let J=null;if(this.rasterJobHandler)({pixelBlock:P,localNorthDirections:J}=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:O,srcMosaicSize:H,destDimension:M?{width:t,height:r}:null,coefs:M?v.coefficients:null,sampleSpacing:M?B:null,projectDirections:R,gcsGrid:R?v.gcsGrid:null,isUV:this.rasterInfo.dataType==="vector-uv",interpolation:i.interpolation,alignmentInfo:N,blockWidths:null},i));else{const A=_e(O,H,{alignmentInfo:N});P=M?pi(A,{width:t,height:r},v.coefficients,B,i.interpolation):A,R&&v.gcsGrid&&(J=yi({width:t,height:r},v.gcsGrid),P=gi(P,this.rasterInfo.dataType,J))}return i.requestRawData||R?{srcExtent:c,pixelBlock:P,transformGrid:v,localNorthDirections:J,extent:e,isPartiallyFilled:L}:{srcExtent:c,extent:e,pixelBlock:P}}async _fetchRawTiles(e,t,r,i){const{origin:s,blockBoundary:n}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:l}=this.getBlockWidthHeight(e);let{x:o,y:c}=t,{width:u,height:h,wrapCount:f}=r;const m=this._getRasterTileAlignmentInfo(e,0);i.buffer&&(o-=i.buffer.cols,c-=i.buffer.rows,u+=2*i.buffer.cols,h+=2*i.buffer.rows);let y=0,g=0,d=0;f&&k(m)&&({worldColumnCountFromOrigin:g,originColumnOffset:d,rightPadding:y}=m,g*m.blockWidth-y>=o+u&&(y=0));const p=Math.floor(o/a),I=Math.floor(c/l),x=Math.floor((o+u+y-1)/a),F=Math.floor((c+h+y-1)/l),T=n[e];if(!T)return null;const{minRow:_,minCol:S,maxCol:C,maxRow:R}=T;if(f===0&&(F<_||x<S||I>R||p>C))return null;const v=new Array;let P=!1;const M=this.ioConfig.allowPartialFill==null?i.allowPartialFill:this.ioConfig.allowPartialFill;for(let A=I;A<=F;A++)for(let E=p;E<=x;E++){let Z=E;if(!i.disableWrapAround&&f&&k(m)&&g<=E&&(Z=E-g-d),A>=_&&Z>=S&&R>=A&&C>=Z){const te=this._fetchRawTile(e,A,Z,i);M?v.push(new Promise(ge=>{te.then(xe=>ge(xe)).catch(()=>{P=!0,ge(null)})})):v.push(te)}else v.push(Promise.resolve(null))}if(v.length===0)return null;const B=await Promise.all(v),N={height:(F-I+1)*l,width:(x-p+1)*a},{spatialReference:O}=this.rasterInfo,H=this.getPyramidPixelSize(e),{x:L,y:J}=H;return{extent:new G({xmin:s.x+p*a*L,xmax:s.x+(x+1)*a*L,ymin:s.y-(F+1)*l*J,ymax:s.y-I*l*J,spatialReference:O}),pixelBlocks:B,mosaicSize:N,isPartiallyFilled:P}}_fetchRawTile(e,t,r,i){const s=this.rasterInfo.storageInfo.blockBoundary[e];if(!s)return Promise.resolve(null);const{minRow:n,minCol:a,maxCol:l,maxRow:o}=s;if(t<n||r<a||t>o||r>l)return Promise.resolve(null);const c=qe(this.url,i.sliceId),u=`${e}/${t}/${r}`;let h=Ge(c,i.registryId,u);if(D(h)){const f=new AbortController;h=this.fetchRawTile(e,t,r,{...i,signal:f.signal}),Ue(c,i.registryId,u,h,f),h.catch(()=>fi(c,i.registryId,u))}return i.signal&&mt(i,()=>{di(c,i.registryId,u)}),h}_computeMagDirValues(e){var o;const{bandCount:t,dataType:r}=this.rasterInfo;if(!(t===2&&r==="vector-magdir"||r==="vector-uv")||(e==null?void 0:e.length)!==2||!((o=e[0])!=null&&o.length))return null;const i=e[0].length;if(r==="vector-magdir"){const c=e[1].map(u=>(u+360)%360);return[e[0],c]}const[s,n]=e,a=[],l=[];for(let c=0;c<i;c++){const[u,h]=xi([s[c],n[c]]);a.push(u),l.push(h)}return[a,l]}_getRasterTileAlignmentInfo(e,t){return this._rasterTileAlighmentInfo==null&&(this._rasterTileAlighmentInfo=_i(this.rasterInfo)),D(this._rasterTileAlighmentInfo.pyramidsInfo)?null:{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,t,r,i={}){const s={datumTransformation:i.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};i.srcResolution&&(s.srcResolution=i.srcResolution,this._updateSourceDataInfo(e,s));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:l,pyramidLevel:o}=s,c=a/t,u=l/r,h=o<n&&c*u>=16,f=o===n&&this._requireTooManySrcTiles(a,l,t,r);if(h||f||a===0||l===0){const m=new j({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/r,spatialReference:e.spatialReference});let y=Fi(m,this.rasterInfo.spatialReference,e,s.datumTransformation);const g=!y||i.srcResolution&&y.x+y.y<i.srcResolution.x+i.srcResolution.y;if(h&&i.srcResolution&&g){const d=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(n-o+3>=d){const p=2**d;y={x:i.srcResolution.x*p,y:i.srcResolution.y*p}}}y&&(s.srcResolution=y,this._updateSourceDataInfo(e,s))}return this._requireTooManySrcTiles(s.srcWidth,s.srcHeight,t,r)&&(s.srcWidth=0,s.srcHeight=0),s}_requireTooManySrcTiles(e,t,r,i){const{tileInfo:s}=this.rasterInfo.storageInfo;return Math.ceil(e/s.size[0])*Math.ceil(t/s.size[1])>=$i||e/r>Ke||t/i>Ke}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const r=this.rasterInfo.spatialReference,{srcResolution:i,datumTransformation:s}=t,{pyramidLevel:n,pyramidResolution:a,excessiveReading:l}=Ye(i,this.rasterInfo,this.ioConfig.sampling);if(l)return;let o=t.srcExtent||ke(e,r,s);if(o==null)return;const c=X(this.rasterInfo.transform);c&&(o=c.inverseTransform(o)),t.srcExtent=o;const u=Math.ceil((o.xmax-o.xmin)/a.x-.1),h=Math.ceil((o.ymax-o.ymin)/a.y-.1);t.pyramidLevel=n,t.pyramidResolution=a,t.srcWidth=u,t.srcHeight=h}_getRequestOptionsWithSliceId(e){return k(this.rasterInfo.multidimensionalInfo)&&e.sliceId==null&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,t){const{srcLocation:r,position:i,pyramidLevel:s,useTransposedTile:n}=t,a=e.pixels[0].length/e.width/e.height;if(!(!e.mask||e.mask[i]))return{location:r,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if(D(l)||!n){const d=e.pixels.map(x=>x[i]),p={location:r,value:d,pyramidLevel:s},I=this._computeMagDirValues(d.map(x=>[x]));return I!=null&&I.length&&(p.magdirValue=I.map(x=>x[0])),p}let o=e.pixels.map(d=>d.slice(i*a,i*a+a)),c=this._computeMagDirValues(o);const{requestSomeSlices:u,identifyOptions:h}=t;let f=Yt(l,h.transposedVariableName);if(u){const d=Kt(f,X(h.multidimensionalDefinition),X(h.timeExtent));o=o.map(p=>d.map(I=>p[I])),c=c==null?void 0:c.map(p=>d.map(I=>p[I])),f=d.map(p=>f[p])}const m=e.noDataValues||this.rasterInfo.noDataValue,y={pixels:o,pixelType:e.pixelType};let g;return k(m)&&(mi(y,m),g=y.mask),{location:r,value:null,dataSeries:f.map((d,p)=>{const I={value:(g==null?void 0:g[p])===0?null:o.map(x=>x[p]),multidimensionalDefinition:d.multidimensionalDefinition.map(x=>new ut({...x,isSlice:!0}))};return c!=null&&c.length&&(I.magdirValue=[c[0][p],c[1][p]]),I}),pyramidLevel:s}}};w([b()],U.prototype,"_rasterTileAlighmentInfo",void 0),w([b({readOnly:!0})],U.prototype,"_isGlobalWrappableSource",null),w([b(nt)],U.prototype,"url",null),w([b({type:String,json:{write:!0}})],U.prototype,"datasetName",void 0),w([b({type:String,json:{write:!0}})],U.prototype,"datasetFormat",void 0),w([b()],U.prototype,"hasUniqueSourceStorageInfo",void 0),w([b()],U.prototype,"rasterInfo",void 0),w([b()],U.prototype,"ioConfig",void 0),w([b()],U.prototype,"sourceJSON",void 0),U=w([Q("esri.layers.support.rasterDatasets.BaseRaster")],U);const ae=U;let ie=class extends ae{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null}async open(e){var o,c,u;await this.init();const{rasterFunction:t}=this;(c=(o=this.primaryRasters)==null?void 0:o.rasters)!=null&&c.length?t.sourceRasters=this.primaryRasters.rasters:this.primaryRasters=t.getPrimaryRasters();const{rasters:r,rasterIds:i}=this.primaryRasters,s=r.map(h=>h.rasterInfo?void 0:h.open(e));await Promise.all(s);const n=r.map(({rasterInfo:h})=>h),a=t.bind({rasterInfos:n,rasterIds:i});if(!a.success||n.length===0)throw new $("raster-function:open",`cannot bind the function: ${(u=a.error)!=null?u:""}`);await this.syncJobHandler();const l=n[0];this.hasUniqueSourceStorageInfo=n.length===1||n.slice(1).every(h=>this._hasSameStorageInfo(h,l)),this.set("sourceJSON",r[0].sourceJSON),this.set("rasterInfo",t.rasterInfo)}async syncJobHandler(){var e;return(e=this.rasterJobHandler)==null?void 0:e.updateRasterFunction(this.rasterFunction)}async fetchPixels(e,t,r,i={}){var h,f;const{rasters:s,rasterIds:n}=this.primaryRasters,a=s.map(m=>m.fetchPixels(e,t,r,i)),l=await Promise.all(a),o=l.map(m=>m.pixelBlock);if(i.skipRasterFunction||o.every(m=>D(m)))return l[0];const c=(f=(h=l.find(m=>k(m.pixelBlock)))==null?void 0:h.extent)!=null?f:e,u=this.rasterJobHandler?await this.rasterJobHandler.process({extent:c,primaryPixelBlocks:o,primaryRasterIds:n}):this.rasterFunction.process({extent:c,primaryPixelBlocks:o,primaryRasterIds:n});return{...l[0],pixelBlock:u}}_hasSameStorageInfo(e,t){const{storageInfo:r,pixelSize:i,spatialReference:s,extent:n}=e,{storageInfo:a,pixelSize:l,spatialReference:o,extent:c}=t;return i.x===l.x&&i.y===l.y&&s.equals(o)&&n.equals(c)&&r.blockHeight===a.blockHeight&&r.blockWidth===a.blockWidth&&r.maximumPyramidLevel===a.maximumPyramidLevel}};w([b({type:String,json:{write:!0}})],ie.prototype,"datasetFormat",void 0),w([b()],ie.prototype,"tileType",void 0),w([b()],ie.prototype,"rasterFunction",void 0),w([b()],ie.prototype,"primaryRasters",void 0),ie=w([Q("esri.layers.support.rasterDatasets.FunctionRaster")],ie);const De=ie,Qe=Be.getLogger("esri.layers.mixins.ImageryTileMixin"),Oi=e=>{let t=class extends e{constructor(...i){var s,n;super(...i),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalSubset=null,this.raster=null,this.rasterFunction=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster=((n=(s=i[0])==null?void 0:s.raster)==null?void 0:n.datasetFormat)==="Function"}get fullExtent(){var i;return(i=this.rasterInfo)==null?void 0:i.extent}set multidimensionalDefinition(i){this._set("multidimensionalDefinition",i),this.updateRenderer()}get tileInfo(){var i;return(i=this.rasterInfo)==null?void 0:i.storageInfo.tileInfo}set url(i){this._set("url",tt(i,Qe))}set renderer(i){this._set("renderer",i),this.updateRenderer()}async convertVectorFieldData(i,s){if(D(i)||!this.rasterInfo)return null;const n=this._rasterJobHandler.instance,a=this.rasterInfo.dataType;return n?n.convertVectorFieldData({pixelBlock:i,dataType:a},s):Ii(i,a)}async createFlowMesh(i,s){const n=this._rasterJobHandler.instance;return n?n.createFlowMesh(i,s):wi(i.meshType,i.simulationSettings,i.flowData,k(s.signal)?s.signal:new AbortController().signal)}normalizeRasterFetchOptions(i){var l,o,c;const{multidimensionalInfo:s}=(l=this.rasterInfo)!=null?l:{};if(D(s))return i;let n=i.multidimensionalDefinition||this.multidimensionalDefinition;!D(n)&&n.length||(n=Ae(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const a=i.timeExtent||this.timeExtent;if(k(n)&&k(a)&&(k(a.start)||k(a.end))){n=n.map(I=>I.clone());const u=(c=(o=s.variables.find(({name:I})=>I===n[0].variableName))==null?void 0:o.dimensions)==null?void 0:c.find(({name:I})=>I==="StdTime"),h=n.find(({dimensionName:I})=>I==="StdTime");if(!u||!h)return{...i,multidimensionalDefinition:null};const{start:f,end:m}=a,y=D(f)?null:f.getTime(),g=D(m)?null:m.getTime(),d=y!=null?y:g,p=g!=null?g:y;if(k(u.values)){const I=u.values.filter(x=>{if(Array.isArray(x)){if(d===p)return x[0]<=d&&x[1]>=d;const F=x[0]<=d&&x[1]>d||x[0]<p&&x[1]>=p,T=x[0]>=d&&x[1]<=p||x[0]<d&&x[1]>p;return F||T}return d===p?x===d:x>=d&&x<=p});if(I.length){const x=I.sort((F,T)=>{var _,S,C,R;return d===p?((_=F[0])!=null?_:F)-((S=T[0])!=null?S:T):Math.abs(((C=F[1])!=null?C:F)-p)-Math.abs(((R=T[1])!=null?R:T)-p)})[0];h.values=[x]}else n=null}else if(u.hasRegularIntervals&&u.extent){const[I,x]=u.extent;d>x||p<I?n=null:h.values=d===p?[d]:[Math.max(I,d),Math.min(x,p)]}}return k(n)&&Qt(n,this.multidimensionalSubset)?{...i,multidimensionalDefinition:null}:{...i,multidimensionalDefinition:n}}async updateRasterFunction(){var u,h,f;if(this.type!=="imagery-tile"||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&this.raster.datasetFormat==="Function"){const m=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&m&&this._set("rasterFunction",$e.fromJSON(m)),void(this._cachedRasterFunctionJson=(u=this.rasterFunction)==null?void 0:u.toJSON())}let i,s=this.raster,n=!1;s.datasetFormat==="Function"?(i=s.primaryRasters.rasters,s=i[0],n=!0):i=[s];const{rasterFunction:a}=this;if(a){const m={raster:s};i.length>1&&i.forEach(d=>m[d.url]=d);const y=Oe((h=a.rasterFunctionDefinition)!=null?h:a.toJSON(),m),g=new De({rasterFunction:y});g.rasterJobHandler=this._rasterJobHandler.instance,await g.open(),this._cachedRasterFunctionJson=(f=this.rasterFunction)==null?void 0:f.toJSON(),this.raster=g}else this.raster=s,this._cachedRasterFunctionJson=null;if(this._cachedRendererJson=null,!n&&!a)return;const{bandIds:l}=this,{bandCount:o}=this.raster.rasterInfo,c=l!=null&&l.length?l.some(m=>m>=o):o>=3;l&&(c||this.renderer.type!=="raster-stretch")&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){var c;const{loaded:i,symbolizer:s}=this;if(!i||!s)return;const{rasterInfo:n}=this.raster,a=(c=We(n,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}))==null?void 0:c.name,l=Ne({...this.renderer.toJSON(),variableName:a});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(l))return;const o=this._rasterJobHandler.instance;o&&(s.rasterInfo=He(n,a),s.rendererJSON=l,s.bind(),await o.updateSymbolizer(s),this._cachedRendererJson=l)}async applyRenderer(i,s){var c;const n=i&&i.pixelBlock;if(!(k(n)&&n.pixels&&n.pixels.length>0))return null;let a;await this.updateRenderer();const l=this._rasterJobHandler.instance,o=(c=this.bandIds)!=null?c:[];return a=l?await l.symbolize({...i,simpleStretchParams:s,bandIds:o}):this.symbolizer.symbolize({...i,simpleStretchParams:s,bandIds:o}),a}getTileUrl(i,s,n){return this.raster.datasetFormat==="RasterTileServer"?`${this.url}/tile/${i}/${s}/${n}`:""}getCompatibleTileInfo(i,s,n=!1){if(!this.loaded||D(s))return null;if(n&&i.equals(this.spatialReference))return this.tileInfo;const a=yt(i);return me.create({size:256,spatialReference:i,origin:a?{x:a.origin[0],y:a.origin[1]}:{x:s.xmin,y:s.ymax}})}getCompatibleFullExtent(i){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(i)||(this._compatibleFullExtent=this.raster.computeExtent(i)),this._compatibleFullExtent):null}async fetchTile(i,s,n,a={}){if(r(this),a.requestAsImageElement){const o=this.getTileUrl(i,s,n);return st(o,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:a.signal}).then(c=>c.data)}const{rasterInfo:l}=this;if(k(l.multidimensionalInfo)&&(a=this.normalizeRasterFetchOptions(a),D(a.multidimensionalDefinition))){const o=a.tileInfo||l.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(i,s,n,o),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),this.renderer.type==="raster-shaded-relief"&&(a={...a,buffer:{cols:1,rows:1}}),this.raster.fetchTile(i,s,n,a)}async fetchPixels(i,s,n,a={}){return k(this.rasterInfo.multidimensionalInfo)&&(a=this.normalizeRasterFetchOptions(a),D(a.multidimensionalDefinition))?{extent:i,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),this.raster.fetchPixels(i,s,n,a))}async identify(i,s={}){var o;const{raster:n,rasterInfo:a}=this;if(k(a.multidimensionalInfo)&&!(a.hasMultidimensionalTranspose&&!!(ct(s.multidimensionalDefinition)||s.transposedVariableName||s.timeExtent))&&(s=this.normalizeRasterFetchOptions(s),D(s.multidimensionalDefinition)))return{location:i,value:null};const l=(o=this.multidimensionalSubset)==null?void 0:o.areaOfInterest;if(l&&!l.contains(i))throw new $("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return n.identify(i,s)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){var a,l,o;const i=(a=this.rasterInfo)==null?void 0:a.multidimensionalInfo;if(D(i)||((l=this.rasterInfo)==null?void 0:l.dataType)!=="standard-time")return!1;const s=this.multidimensionalDefinition,n=(o=s==null?void 0:s[0])==null?void 0:o.variableName;return i.variables.some(c=>c.name===n&&(!(s!=null&&s[0].dimensionName)||c.dimensions.some(u=>u.name==="StdTime")))}getStandardTimeValue(i){return new Date(24*(i-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(i){var n;const s=i!=null?i:(n=this.rasterInfo)==null?void 0:n.multidimensionalInfo;return Zt(this.multidimensionalSubset,s)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=Ae(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this._configDefaultRenderer()}_initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const i=new jt;return this._rasterJobHandler.connectionPromise=i.initialize().then(()=>{r(this),this._rasterJobHandler.instance=i,this.raster.rasterJobHandler=i,this.renderer&&this.updateRenderer(),this.raster.datasetFormat==="Function"&&this.raster.syncJobHandler()}).catch(()=>{}),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){var i;if(this.interpolation==null){r(this);const{raster:s}=this,n=At(s.rasterInfo,s.tileType,(i=this.sourceJSON)==null?void 0:i.defaultResamplingMethod);this._set("interpolation",n)}}_configDefaultRenderer(i="no"){var c,u,h,f,m,y,g;r(this);const{rasterInfo:s}=this.raster;!this.bandIds&&s.bandCount>1&&(this.bandIds=Wt(s));const n=(c=We(s,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}))==null?void 0:c.name;if(!this.renderer||i==="override"){const d=Le(s,{bandIds:this.bandIds,variableName:n});this.raster.datasetFormat==="WCSServer"&&d.type==="raster-stretch"&&(((h=(u=s.statistics)==null?void 0:u[0].max)!=null?h:0)>1e24||((m=(f=s.statistics)==null?void 0:f[0].min)!=null?m:0)<-1e24)&&(d.dynamicRangeAdjustment=!0,d.statistics=null,d.stretchType==="none"&&(d.stretchType="min-max")),this.renderer=d}const a=Ne({...this.renderer.toJSON(),variableName:n}),l=He(s,n);this.symbolizer?(this.symbolizer.rendererJSON=a,this.symbolizer.rasterInfo=l):this.symbolizer=new ti({rendererJSON:a,rasterInfo:l});const o=this.symbolizer.bind();if(o.success){if(i==="auto"){const{colormap:d}=this.raster.rasterInfo,p=this.renderer;if(k(d))if(p.type!=="raster-colormap")this._configDefaultRenderer("override");else{const I=Le(this.raster.rasterInfo);JSON.stringify(I)!==JSON.stringify(p)&&this._configDefaultRenderer("override")}else if(p.type==="raster-stretch"){const I=(y=this.bandIds)==null?void 0:y.length,x=(g=p.statistics)==null?void 0:g.length;!p.dynamicRangeAdjustment&&x&&I&&x!==I&&this._configDefaultRenderer("override")}}}else Qe.warn("imagery-tile-mixin",o.error||"The given renderer is not supported by the layer."),i==="auto"&&this._configDefaultRenderer("override")}};function r(i){if(!i.raster||!i.rasterInfo)throw new $("imagery-tile","no raster")}return w([b()],t.prototype,"_cachedRendererJson",void 0),w([b()],t.prototype,"_cachedRasterFunctionJson",void 0),w([b()],t.prototype,"_compatibleFullExtent",void 0),w([b()],t.prototype,"_isConstructedFromFunctionRaster",void 0),w([b()],t.prototype,"_rasterJobHandler",void 0),w([b()],t.prototype,"bandIds",void 0),w([b({json:{origins:{service:{read:{source:"copyrightText"}}}}})],t.prototype,"copyright",void 0),w([b({json:{read:!1}})],t.prototype,"fullExtent",null),w([b()],t.prototype,"interpolation",void 0),w([b()],t.prototype,"ioConfig",void 0),w([b({type:[ut],json:{write:!0}})],t.prototype,"multidimensionalDefinition",null),w([b({type:Lt,json:{write:!0}})],t.prototype,"multidimensionalSubset",void 0),w([b()],t.prototype,"raster",void 0),w([b({type:$e})],t.prototype,"rasterFunction",void 0),w([b()],t.prototype,"rasterInfo",void 0),w([b()],t.prototype,"sourceJSON",void 0),w([b({readOnly:!0,type:q,json:{read:!1}})],t.prototype,"spatialReference",void 0),w([b({json:{read:!1}})],t.prototype,"tileInfo",null),w([b(nt)],t.prototype,"url",null),w([b({types:lt})],t.prototype,"renderer",null),w([b()],t.prototype,"symbolizer",void 0),t=w([Q("esri.layers.ImageryTileMixin")],t),t};function Di(e){const t=e.fields,r=e.records,i=t.some(c=>c.name.toLowerCase()==="oid")?"OBJECTID":"OID",s=[{name:i,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map(c=>({name:c.name,type:"esriFieldType"+c.typeName,alias:c.name}))),n=s.map(c=>c.name),a=[];let l=0,o=0;return r.forEach(c=>{const u={};for(u[i]=l++,o=1;o<n.length;o++)u[n[o]]=c[o-1];a.push({attributes:u})}),{displayFieldName:"",fields:s,features:a}}class ht{static get supportedVersions(){return[5]}static parse(t){const r=new DataView(t),i=3&r.getUint8(0);if(i!==3)return{header:{version:i},recordSet:null};const s=r.getUint32(4,!0),n=r.getUint16(8,!0),a=r.getUint16(10,!0),l={version:i,recordCount:s,headerByteCount:n,recordByteCount:a};let o=32;const c=[],u=[];let h;if(i===3){for(;r.getUint8(o)!==13;)h=String.fromCharCode(r.getUint8(o+11)).trim(),c.push({name:je(new Uint8Array(t,o,11)),type:h,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(h)],length:r.getUint8(o+16)}),o+=32;if(o+=1,c.length>0)for(;u.length<s&&t.byteLength-o>a;){const f=[];r.getUint8(o)===32?(o+=1,c.forEach(m=>{if(m.type==="C")f.push(je(new Uint8Array(t,o,m.length)).trim());else if(m.type==="N")f.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(t,o,m.length)).trim(),10));else if(m.type==="F")f.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(t,o,m.length)).trim()));else if(m.type==="D"){const y=String.fromCharCode.apply(null,new Uint8Array(t,o,m.length)).trim();f.push(new Date(parseInt(y.substring(0,4),10),parseInt(y.substring(4,6),10)-1,parseInt(y.substring(6,8),10)))}o+=m.length}),u.push(f)):o+=a}}return{header:l,fields:c,records:u,recordSet:Di({fields:c,records:u})}}}const se=new Map;se.set("int16","esriFieldTypeSmallInteger"),se.set("int32","esriFieldTypeInteger"),se.set("int64","esriFieldTypeInteger"),se.set("float32","esriFieldTypeSingle"),se.set("float64","esriFieldTypeDouble"),se.set("text","esriFieldTypeString");const Ze=8;let ue=class extends ae{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:e==null?void 0:e.signal});if(!this._validateHeader(t))throw new $("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:r,rasterInfo:i}=this._parseHeader(t);if(i.dataType==="thematic"){const s=await this._fetchAuxiliaryInformation();i.attributeTable=s}this._set("storageInfo",r),this._set("rasterInfo",i),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,r,i={}){const{transposeInfo:s}=this.rasterInfo.storageInfo,{transposedVariableName:n}=i,a=!(!s||!n),l=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(l<0)return null;const o=this._buildCacheFilePath(l,t,r,i.multidimensionalDefinition,n),c=this._getIndexRecordFromBundle(t,r,a),u=await this.request(o,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:i.signal});if(!u)return null;const h=new Uint8Array(u.data),f=this._getTileEndAndContentType(h,c);if(f.recordSize===0)return null;const m=await this.request(o,{range:{from:f.position,to:f.position+f.recordSize},responseType:"array-buffer",signal:i.signal});if(!m)return null;const[y,g]=this._getTileSize(a);return this.decodePixelBlock(m.data,{width:y,height:g,planes:null,pixelType:null,returnInterleaved:a})}_validateHeader(e){const t=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return e&&e.type==="RasterInfo"&&!t.some(r=>!e[r])}_parseHeader(e){var J,A;const t=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:r,histograms:i,colormap:s,blockWidth:n,blockHeight:a,firstPyramidLevel:l,maximumPyramidLevel:o}=e,c=e.statistics&&e.statistics.map(E=>({min:E.min,max:E.max,avg:E.mean,stddev:E.standardDeviation,median:E.median,mode:E.mode})),u=e.extent.spatialReference,h=(J=e.geodataXform)==null?void 0:J.spatialReference,f=new q((u==null?void 0:u.wkid)||(u==null?void 0:u.wkt)?u:h);let m=new G({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:f});const y=new j({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:f}),g=Math.round((m.xmax-m.xmin)/y.x),d=Math.round((m.ymax-m.ymin)/y.y),p=this._parseTransform(e.geodataXform),I=p?m:null;p&&(m=p.forwardTransform(m),y.x=(m.xmax-m.xmin)/g,y.y=(m.ymax-m.ymin)/d);const x=(A=e.properties)!=null?A:{},F=e.format.toLowerCase().replace("cache/",""),T=new j(e.origin.x,e.origin.y,f);let _,S,C,R;if(s&&s.colors)for(_=[],S=0;S<s.colors.length;S++)C=s.colors[S],R=s.values?s.values[S]:S,_.push([R,255&C,C<<16>>>24,C<<8>>>24,C>>>24]);const v=e.LODInfos,P=[];for(S=0;S<v.levels.length;S++)P.push(new rt({level:v.levels[S],resolution:v.resolutions[S],scale:96/.0254*v.resolutions[S]}));const M=new me({dpi:96,lods:P,format:F,origin:T,size:[n,a],spatialReference:f}),B={recordSize:Ze,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*Ze+64},N=[{maxCol:Math.ceil(g/n)-1,maxRow:Math.ceil(d/a)-1,minCol:0,minRow:0}];let O=2;if(o>0)for(S=0;S<o;S++)N.push({maxCol:Math.ceil(g/O/n)-1,maxRow:Math.ceil(d/O/a)-1,minCol:0,minRow:0}),O*=2;const H=e.mdInfo;let L=null;if(H&&x._yxs){const E=x._yxs;L={packetSize:E.PacketSize,tileSize:[E.TileXSize,E.TileYSize]}}return{storageInfo:B,rasterInfo:new ye({width:g,height:d,pixelType:t,bandCount:r,extent:m,nativeExtent:I,transform:p,spatialReference:f,pixelSize:y,keyProperties:x,statistics:c,histograms:i,multidimensionalInfo:H,colormap:_,storageInfo:new pe({blockWidth:n,blockHeight:a,pyramidBlockWidth:n,pyramidBlockHeight:a,origin:T,tileInfo:M,transposeInfo:L,firstPyramidLevel:l,maximumPyramidLevel:o,blockBoundary:N})})}}_parseTransform(e){var r,i;if(!ki(e))throw new $("cloudraster:open","the data contains unsupported geodata transform types");const t=Ci(e);if(t.type==="identity")return null;if(t.type!=="polynomial"||!((r=t.forwardCoefficients)!=null&&r.length)||!((i=t.inverseCoefficients)!=null&&i.length))throw new $("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return t}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then(n=>n.data).catch(()=>null),r=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then(n=>n.data).catch(()=>null),i=await Promise.all([t,r]);let s;if(i[0]){let n=i[0].fields;const a=i[0].values;if(n&&a){n=n.map(o=>({type:o.name==="OID"?"esriFieldTypeOID":se.get(o.type),name:o.name,alias:o.alias||o.name}));const l=a.map(o=>({attributes:o}));n&&a&&(s={fields:n,features:l})}}return!s&&i[1]&&(s=ht.parse(i[1]).recordSet),at.fromJSON(s)}_buildCacheFilePath(e,t,r,i,s){const n=this._getPackageSize(!!s),a=Math.floor(t/n)*n,l=Math.floor(r/n)*n,o="R"+this._toHexString4(a)+"C"+this._toHexString4(l);let c="L";c+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:u}=this.rasterInfo,h=i==null?void 0:i[0];if(D(u)||!h)return`${this.url}/_alllayers/${c}/${o}.bundle`;let f="_yxs";if(!s){f=u.variables.find(g=>g.name===h.variableName).dimensions[0].values.indexOf(h.values[0]).toString(16);const y=4-f.length;for(let g=0;g<y;g++)f="0"+f;f="S"+f}const m=this._getVariableFolderName(s||h.variableName);return`${this.url}/_alllayers/${m}/${f}/${c}/${o}.bundle`}_getPackageSize(e=!1){var r;const{transposeInfo:t}=this.rasterInfo.storageInfo;return e&&k(t)?(r=t.packetSize)!=null?r:0:this.storageInfo.packetSize}_getTileSize(e=!1){const{storageInfo:t}=this.rasterInfo,{transposeInfo:r}=t;return e&&k(r)?r.tileSize:t.tileInfo.size}_getVariableFolderName(e){return(e=e.trim())===""?"_v":e.replace(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,t,r=!1){const i=this._getPackageSize(r),s=i*(e%i)+t%i;if(s<0)throw new Error("Invalid level / row / col");return 20+s*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const r=e.subarray(t,t+8);let i,s=0;for(i=0;i<5;i++)s|=(255&r[i])<<8*i;const n=0xffffffffff&s;for(s=0,i=5;i<8;i++)s|=(255&r[i])<<8*(i-5);return{position:n,recordSize:0xffffffffff&s}}_toHexString4(e){let t=e.toString(16);if(t.length!==4){let r=4-t.length;for(;r-- >0;)t="0"+t}return t}};w([b({readOnly:!0})],ue.prototype,"storageInfo",void 0),w([b({type:String,json:{write:!0}})],ue.prototype,"datasetFormat",void 0),ue=w([Q("esri.layers.support.rasterDatasets.CloudRaster")],ue);const Bi=ue;let he=class extends ae{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.data=null}async open(e){var d,p;await this.init();const t=this.data,{pixelBlock:r,statistics:i,histograms:s,name:n,keyProperties:a,nativeExtent:l,transform:o}=this.data,{width:c,height:u,pixelType:h}=r,f=(d=t.extent)!=null?d:new G({xmin:-.5,ymin:.5,xmax:c-.5,ymax:u-.5,spatialReference:new q({wkid:3857})}),m=(p=t.isPseudoSpatialReference)!=null?p:!t.extent,y={x:f.width/c,y:f.height/u},g=new ye({width:c,height:u,pixelType:h,extent:f,nativeExtent:l,transform:o,pixelSize:y,spatialReference:f.spatialReference,bandCount:r.pixels.length,keyProperties:a||{},statistics:i,isPseudoSpatialReference:m,histograms:s});this.createRemoteDatasetStorageInfo(g,512,512),this._set("rasterInfo",g),this.updateTileInfo(),await this._buildInMemoryRaster(r,{width:512,height:512},e),this.datasetName=n,this.url="/InMemory/"+n}fetchRawTile(e,t,r,i={}){const s=this._pixelBlockTiles.get(`${e}/${t}/${r}`);return Promise.resolve(s)}async _buildInMemoryRaster(e,t,r){var c,u;const i=this.rasterInfo.storageInfo.maximumPyramidLevel,s=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:i},r):Promise.resolve(bi(e,t,i)),n=k(this.rasterInfo.statistics),a=k(this.rasterInfo.histograms),l=n?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},r):Promise.resolve(ii(e)),o=await ot([s,l]);if(!o[0].value&&o[1].value)throw new $("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=o[0].value,n||(this.rasterInfo.statistics=(c=o[1].value)==null?void 0:c.statistics),a||(this.rasterInfo.histograms=(u=o[1].value)==null?void 0:u.histograms)}};w([b({type:String,json:{write:!0}})],he.prototype,"datasetFormat",void 0),w([b()],he.prototype,"data",void 0),he=w([Q("esri.layers.support.rasterDatasets.InMemoryRaster")],he);const Ei=he;function le(e,t){if(!e||!t)return[];let r=t;t.includes("/")?(r=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const i=[];if(t){const n=le(e,r);for(let a=0;a<n.length;a++)le(n[a],t).forEach(l=>i.push(l));return i}const s=e.getElementsByTagNameNS("*",r);if(!s||s.length===0)return[];for(let n=0;n<s.length;n++)i.push(s[n]||s.item[n]);return i}function V(e,t){if(!e||!t)return null;let r=t;t.includes("/")?(r=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const i=le(e,r);return i.length>0?t?V(i[0],t):i[0]:null}function K(e,t=null){const r=t?V(e,t):e;let i;return r?(i=r.textContent||r.nodeValue,i?i.trim():null):null}function zi(e,t){const r=le(e,t),i=[];let s;for(let n=0;n<r.length;n++)s=r[n].textContent||r[n].nodeValue,s&&(s=s.trim(),s!==""&&i.push(s));return i}function be(e,t){return zi(e,t).map(r=>Number(r))}function ne(e,t){const r=K(e,t);return Number(r)}function Ce(e,t){var s;const r=(s=e==null?void 0:e.nodeName)==null?void 0:s.toLowerCase(),i=t.toLowerCase();return r.slice(r.lastIndexOf(":")+1)===i}function et(e,t){if(!e||!t)return null;const r=[];for(let i=0;i<e.length;i++)r.push(e[i]),r.push(t[i]);return r}function Ji(e){var u;const t=V(e,"GeodataXform"),r=ve(ne(t,"SpatialReference/WKID")||K(t,"SpatialReference/WKT"));if(t.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:r,transform:null};const i=(u=ne(t,"PolynomialOrder"))!=null?u:1,s=be(t,"CoeffX/Double"),n=be(t,"CoeffY/Double"),a=be(t,"InverseCoeffX/Double"),l=be(t,"InverseCoeffY/Double"),o=et(s,n),c=et(a,l);return{spatialReference:r,transform:o&&c&&o.length&&c.length?new ze({spatialReference:r,polynomialOrder:i,forwardCoefficients:o,inverseCoefficients:c}):null}}function Ni(e){var f;const t=ne(e,"NoDataValue"),r=V(e,"Histograms/HistItem"),i=ne(r,"HistMin"),s=ne(r,"HistMax"),n=ne(r,"BucketCount"),a=(f=K(r,"HistCounts"))==null?void 0:f.split("|").map(m=>Number(m));let l,o,c,u;le(e,"Metadata/MDI").forEach(m=>{var g;const y=Number((g=m.textContent)!=null?g:m.nodeValue);switch(m.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=y;break;case"STATISTICS_MAXIMUM":o=y;break;case"STATISTICS_MEAN":c=y;break;case"STATISTICS_STDDEV":u=y}});const h=ne(e,"Metadata/SourceBandIndex");return{noDataValue:t,histogram:(a==null?void 0:a.length)&&i!=null&&s!=null?{min:i,max:s,size:n||a.length,counts:a}:null,sourceBandIndex:h,statistics:l!=null&&o!=null?{min:l,max:o,avg:c,stddev:u}:null}}function ve(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&t!==0)return new q({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const r=e.indexOf("VERTCS"),i=e.indexOf("PROJCS"),s=i>-1?i:e.indexOf("GEOGCS");if(s===-1)return null;const n=e.slice(s,e.lastIndexOf("]",r)+1).trim(),a=e.slice(r,e.lastIndexOf("]")).trim();t=Pe(n);const l=new q(t?{wkid:t}:{wkt:n}),o=Pe(a);return o&&(l.vcsWkid=o),l}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=Pe(e),new q(t!==0?{wkid:t}:{wkt:e})):null}function Pe(e){var s;const t=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map(n=>n.trim()).filter(n=>n!==""),r=t[t.length-1].split(","),i=(s=r[0])==null?void 0:s.toLowerCase();if((i==="epsg"||i==="esri")&&e.endsWith('"]]')){const n=Number(r[1]);if(!isNaN(n)&&n!==0)return n}return 0}function Je(e){var i;if(((i=e==null?void 0:e.documentElement.tagName)==null?void 0:i.toLowerCase())!=="pamdataset")return{};const t={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach(s=>{if(s.nodeType===1){if(Ce(s,"SRS")){if(!t.spatialReference){const n=K(s);t.spatialReference=ve(n)}}else if(Ce(s,"Metadata"))if(s.getAttribute("domain")==="xml:ESRI"){const{spatialReference:n,transform:a}=Ji(s);t.transform=a,t.spatialReference||(t.spatialReference=n)}else le(s,"MDI").forEach(n=>t.metadata[n.getAttribute("key")]=K(n));else if(Ce(s,"PAMRasterBand")){const n=Ni(s);n.sourceBandIndex!=null&&t.rasterBands[n.sourceBandIndex]==null?t.rasterBands[n.sourceBandIndex]=n:t.rasterBands.push(n)}}});const r=t.rasterBands;if(r.length){const s=!!r[0].statistics;t.statistics=s?r.map(a=>a.statistics).filter(k):null;const n=!!r[0].histogram;t.histograms=n?r.map(a=>a.histogram).filter(k):null}return t}let Re=class extends ae{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:r,statistics:i,histograms:s,transform:n}=await this._fetchAuxiliaryData(e);const a=!r;a&&(r=new q({wkid:3857})),(s==null?void 0:s.length)&&i==null&&(i=Ee(s));const{width:l,height:o}=t;let c=new G({xmin:-.5,ymin:.5-o,xmax:l-.5,ymax:.5,spatialReference:r});const u=n?n.forwardTransform(c):c;let h=!0;if(n){const m=n.forwardCoefficients;h=m&&m[1]===0&&m[2]===0,h&&(n=null,c=u)}const f=new Ei({data:{extent:u,nativeExtent:c,transform:n,pixelBlock:t,statistics:i,histograms:s,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await f.open(),f.data=null,this._set("rasterInfo",f.rasterInfo),this._inMemoryRaster=f}fetchRawTile(e,t,r,i={}){return this._inMemoryRaster.fetchRawTile(e,t,r,i)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:e==null?void 0:e.signal}),r=si(t).toUpperCase();if(r!=="JPG"&&r!=="PNG"&&r!=="GIF"&&r!=="BMP")throw new $("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",r);const i=r.toLowerCase(),s=i==="gif"||i==="bmp"||!gt("ios"),n=await this.decodePixelBlock(t,{format:i,useCanvas:s,hasNoZlibMask:!0});if(n==null)throw new $("image-aux-raster:open","the data cannot be decoded");return n}async _fetchAuxiliaryData(e){var c,u;const t=X(e==null?void 0:e.signal),r=(c=this.ioConfig.skipExtensions)!=null?c:[],i=r.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:t}),s=this.datasetFormat,n=s==="JPG"?"jgw":s==="PNG"?"pgw":s==="BMP"?"bpw":null,a=n&&r.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:t}),l=await ot([i,a]);if(t!=null&&t.aborted)throw xt();const o=Je((u=l[0].value)==null?void 0:u.data);if(!o.transform){const h=l[1].value?l[1].value.data.split(`
`).slice(0,6).map(f=>Number(f)):null;o.transform=(h==null?void 0:h.length)===6?new ze({forwardCoefficients:[h[4],h[5],h[0],-h[1],h[2],-h[3]]}):null}return o}};w([b({type:String,json:{write:!0}})],Re.prototype,"datasetFormat",void 0),Re=w([Q("esri.layers.support.rasterDatasets.ImageAuxRaster")],Re);const Se=Re;let fe=class extends ae{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async open(e){var S,C,R,v,P;await this.init();const t=e&&e.signal,r=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});r.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const i=r.data;if(this.sourceJSON=i,!i)throw new $("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!i.tileInfo)throw new $("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const s=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=i.cacheType,this.tileType==null&&(s.includes(i.tileInfo.format.toLowerCase())?this.tileType="Map":i.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=(C=(S=i.name)==null?void 0:S.slice(i.name.indexOf("/")+1))!=null?C:"";const n=await this._fetchRasterInfo({signal:t});if(D(n))throw new $("image-server-raster:open","cannot initialize image service");const a=this.tileType==="Map"?It(i.tileInfo,i):me.fromJSON(i.tileInfo);wt(a);const[l,o]=this._computeMinMaxLOD(n,a),{extent:c,pixelSize:u}=n,h=.5/n.width*u.x,f=Math.max(u.x,u.y),{lods:m}=a;(this.tileType!=="Map"&&i.maxScale!==0||Math.abs(u.x-u.y)>h||!m.some(M=>Math.abs(M.resolution-f)<h))&&(u.x=u.y=l.resolution,n.width=Math.ceil((c.xmax-c.xmin)/u.x-.1),n.height=Math.ceil((c.ymax-c.ymin)/u.y-.1));const y=l.level-o.level,[g,d]=a.size,p=[],I=[];m.forEach((M,B)=>{M.level>=o.level&&M.level<=l.level&&p.push({x:M.resolution,y:M.resolution}),B<m.length-1&&I.push(Math.round(10*M.resolution/m[B+1].resolution)/10)}),p.sort((M,B)=>M.x-B.x);const x=this.computeBlockBoundary(c,g,d,a.origin,p,y),F=p.length>1?p.slice(1):null;let T;i.transposeInfo&&(T={tileSize:[i.transposeInfo.rows,i.transposeInfo.cols],packetSize:(v=(R=n.keyProperties)==null?void 0:R._yxs.PacketSize)!=null?v:0});const _=I.length<=1||I.length>=3&&I.slice(0,I.length-1).every(M=>M===I[0])?(P=I[0])!=null?P:2:Math.round(10/(o.resolution/l.resolution)**(-1/y))/10;if(n.storageInfo=new pe({blockWidth:a.size[0],blockHeight:a.size[1],pyramidBlockWidth:a.size[0],pyramidBlockHeight:a.size[1],pyramidResolutions:F,pyramidScalingFactor:_,compression:a.format,origin:a.origin,firstPyramidLevel:1,maximumPyramidLevel:y,tileInfo:a,transposeInfo:T,blockBoundary:x}),this._fixGCSShift(n),this._set("rasterInfo",n),i.capabilities.toLowerCase().includes("tilemap")){const M={tileInfo:n.storageInfo.tileInfo,parsedUrl:bt(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new St({layer:M})}}async fetchRawTile(e,t,r,i={}){const{storageInfo:s,extent:n}=this.rasterInfo,{transposeInfo:a}=s,l=k(a)&&!!i.transposedVariableName;if(this._slices&&!l&&i.sliceId==null)return null;const o=l?0:s.maximumPyramidLevel-e+this._levelOffset,c=`${this.url}/tile/${o}/${t}/${r}`,u=this._slices?l?{variable:i.transposedVariableName}:{sliceId:i.sliceId||0}:null,{data:h}=await this.request(c,{query:u,responseType:"array-buffer",signal:i.signal});if(!h)return null;const f=l?a.tileSize:s.tileInfo.size,m=await this.decodePixelBlock(h,{width:f[0],height:f[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:l,noDataValue:X(this.rasterInfo.noDataValue)});if(m==null)return null;const y=s.blockBoundary[e];if(s.compression!=="jpg"||r>y.minCol&&r<y.maxCol&&t>y.minRow&&t<y.maxRow)return m;const{origin:g,blockWidth:d,blockHeight:p}=s,{x:I,y:x}=this.getPyramidPixelSize(e),F=Math.round((n.xmin-g.x)/I)%d,T=Math.round((n.xmax-g.x)/I)%d||d,_=Math.round((g.y-n.ymax)/x)%p,S=Math.round((g.y-n.ymin)/x)%p||p,C=r===y.minCol?F:0,R=t===y.minRow?_:0,v=r===y.maxCol?T:d,P=t===y.maxRow?S:p;return Si(m,{x:C,y:R},{width:v-C,height:P-R}),m}getSliceIndex(e){if(!this._slices||D(e)||e.length===0)return null;const t=e;for(let r=0;r<this._slices.length;r++){const i=this._slices[r].multidimensionalDefinition;if(i.length===t.length&&!i.some(s=>{const n=t.find(a=>s.variableName===a.variableName&&a.dimensionName===s.dimensionName);return n?(Array.isArray(s.values[0])?`${s.values[0][0]}-${s.values[0][1]}`:s.values[0])!==(Array.isArray(n.values[0])?`${n.values[0][0]}-${n.values[0][1]}`:n.values[0]):!0}))return r}return null}async fetchVariableStatisticsHistograms(e,t){const r=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then(n=>{var a;return(a=n.data)==null?void 0:a.statistics}),i=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then(n=>{var a;return(a=n.data)==null?void 0:a.histograms}),s=await Promise.all([r,i]);return s[0]&&s[0].forEach(n=>{n.avg=n.mean,n.stddev=n.standardDeviation}),{statistics:s[0]||null,histograms:s[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let r=this.identifyPixelLocation(e,0,X(t.datumTransformation));if(r===null)return null;let i=0;const{maximumPyramidLevel:s}=this.rasterInfo.storageInfo;let n=s-i+this._levelOffset;const a=r.srcLocation;for(;n>=0;){try{if(await this._tilemapCache.fetchAvailability(n,r.row,r.col,t)==="available")break}catch{}if(n--,i++,r=this.identifyPixelLocation(a,i,X(t.datumTransformation)),r===null)return null}return n===-1||r==null?null:i}async _fetchRasterInfo(e){const t=this.sourceJSON;if(this.tileType==="Map"){const a=t.fullExtent||t.extent,l=Math.ceil((a.xmax-a.xmin)/t.pixelSizeX-.1),o=Math.ceil((a.ymax-a.ymin)/t.pixelSizeY-.1),c=q.fromJSON(t.spatialReference||a.spatialReference),u=new j({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:c});return new ye({width:l,height:o,bandCount:3,extent:G.fromJSON(a),spatialReference:c,pixelSize:u,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:r}=e,i=qt(this.url,this.sourceJSON,{signal:r,query:this.ioConfig.customFetchParameters}),s=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:r}).then(a=>a.data&&a.data.slices).catch(()=>null):null,n=await Promise.all([i,s]);return this._slices=n[1],n[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:r}=e;t.xmin>-1&&t.xmax>181&&(r==null?void 0:r.wkid)&&r.isGeographic&&(e.nativeExtent=e.extent,e.transform=new Pi,e.extent=e.transform.forwardTransform(t))}_computeMinMaxLOD(e,t){var f,m,y;const{pixelSize:r}=e,i=.5/e.width*r.x,{lods:s}=t,n=t.lodAt(Math.max.apply(null,s.map(g=>g.level))),a=t.lodAt(Math.min.apply(null,s.map(g=>g.level))),{tileType:l}=this;if(l==="Map")return this._levelOffset=s[0].level,[n,a];if(l==="Raster")return[(f=s.find(g=>g.resolution===r.x))!=null?f:n,a];const{minScale:o,maxScale:c}=this.sourceJSON;let u=n;c>0&&(u=s.find(g=>Math.abs(g.scale-c)<i),u||(u=(m=s.filter(g=>g.scale>c).sort((g,d)=>g.scale>d.scale?1:-1)[0])!=null?m:n));let h=a;return o>0&&(h=(y=s.find(g=>Math.abs(g.scale-o)<i))!=null?y:a,this._levelOffset=h.level-a.level),[u,h]}};w([b({type:String,json:{write:!0}})],fe.prototype,"datasetFormat",void 0),w([b()],fe.prototype,"tileType",void 0),fe=w([Q("esri.layers.support.rasterDatasets.ImageServerRaster")],fe);const Hi=fe,Y=new Map;Y.set("Int8","s8"),Y.set("UInt8","u8"),Y.set("Int16","s16"),Y.set("UInt16","u16"),Y.set("Int32","s32"),Y.set("UInt32","u32"),Y.set("Float32","f32"),Y.set("Float64","f32"),Y.set("Double64","f32");const ee=new Map;ee.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),ee.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),ee.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),ee.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let oe=class extends ae{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){var g,d;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const t=e?X(e.signal):null,r=await this.request(this.url,{responseType:"xml",signal:t}),{rasterInfo:i,files:s}=this._parseHeader(r.data);if(((g=this.ioConfig.skipExtensions)==null?void 0:g.indexOf("aux.xml"))===-1){const p=await this._fetchAuxiliaryData(e);p!=null&&(i.statistics=(d=p.statistics)!=null?d:i.statistics,i.histograms=p.histograms,p.histograms&&D(i.statistics)&&(i.statistics=Ee(p.histograms)))}this._set("rasterInfo",i),this._files=s;const n=await this.request(s.index,{responseType:"array-buffer",signal:t});this._storageIndex=this._parseIndex(n.data);const{blockWidth:a,blockHeight:l}=this.rasterInfo.storageInfo,o=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:c,height:u}=this.rasterInfo,h=[],f=this._getBandSegmentCount();let m=0,y=-1;for(;m<this._storageIndex.length;){y++;const p=Math.ceil(c/a/o**y)-1,I=Math.ceil(u/l/o**y)-1;m+=(p+1)*(I+1)*f*4,h.push({maxRow:I,maxCol:p,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=h,y>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=y),this.updateTileInfo()}async fetchRawTile(e,t,r,i={}){const{blockWidth:s,blockHeight:n,blockBoundary:a}=this.rasterInfo.storageInfo,l=a[e];if(!l||l.maxRow<t||l.maxCol<r||l.minRow>t||l.minCol>r)return null;const{bandCount:o,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:h,actualTileHeight:f}=this._getTileLocation(e,t,r);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const R=new Uint8Array(s*n);return new Ri({width:s,height:n,pixels:null,mask:R,validPixelCount:0})}const{bandIds:m}=this.ioConfig,y=this._getBandSegmentCount(),g=[];let d=0;for(d=0;d<y;d++)(!m||m.indexOf[d]>-1)&&g.push(this.request(this._files.data,{range:{from:u[d].from,to:u[d].to},responseType:"array-buffer",signal:i.signal}));const p=await Promise.all(g),I=p.map(R=>R.data.byteLength).reduce((R,v)=>R+v),x=new Uint8Array(I);let F=0;for(d=0;d<y;d++)x.set(new Uint8Array(p[d].data),F),F+=p[d].data.byteLength;const T=ee.get(this.rasterInfo.storageInfo.compression).decoderFormat,_=await this.decodePixelBlock(x.buffer,{width:s,height:n,format:T,planes:(m==null?void 0:m.length)||o,pixelType:c});if(_==null)return null;if(k(this.rasterInfo.noDataValue)&&T!=="lerc"&&!_.mask){const R=this.rasterInfo.noDataValue[0];if(R!=null){const v=_.width*_.height,P=new Uint8Array(v);if(Math.abs(R)>1e24)for(d=0;d<v;d++)Math.abs((_.pixels[0][d]-R)/R)>1e-6&&(P[d]=1);else for(d=0;d<v;d++)_.pixels[0][d]!==R&&(P[d]=1);_.mask=P}}let S=0,C=0;if(h!==s||f!==n){let R=_.mask;if(R)for(d=0;d<n;d++)if(C=d*s,d<f)for(S=h;S<s;S++)R[C+S]=0;else for(S=0;S<s;S++)R[C+S]=0;else for(R=new Uint8Array(s*n),_.mask=R,d=0;d<f;d++)for(C=d*s,S=0;S<h;S++)R[C+S]=1}return _}_parseIndex(e){if(e.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let t,r,i,s,n,a;if(ri){for(r=new Uint8Array(e),s=new ArrayBuffer(e.byteLength),i=new Uint8Array(s),n=0;n<e.byteLength/4;n++)for(a=0;a<4;a++)i[4*n+a]=r[4*n+3-a];t=new Uint32Array(s)}else t=new Uint32Array(e);return t}_getBandSegmentCount(){return ee.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,r){const{blockWidth:i,blockHeight:s,pyramidScalingFactor:n}=this.rasterInfo.storageInfo,{width:a,height:l}=this.rasterInfo,o=this._getBandSegmentCount();let c,u,h,f=0,m=0;for(h=0;h<e;h++)m=n**h,c=Math.ceil(a/i/m),u=Math.ceil(l/s/m),f+=c*u;m=n**e,c=Math.ceil(a/i/m),u=Math.ceil(l/s/m),f+=t*c+r,f*=4*o;const y=this._storageIndex.subarray(f,f+4*o);let g=0,d=0;const p=[];for(let I=0;I<o;I++)g=y[4*I+0]*2**32+y[4*I+1],d=g+y[4*I+2]*2**32+y[4*I+3],p.push({from:g,to:d});return{ranges:p,actualTileWidth:r<c-1?i:Math.ceil(a/m)-i*(c-1),actualTileHeight:t<u-1?s:Math.ceil(l/m)-s*(u-1)}}_parseHeader(e){var P;const t=V(e,"MRF_META/Raster");if(!t)throw new $("mrf:open","not a valid MRF format");const r=V(t,"Size"),i=parseInt(r.getAttribute("x"),10),s=parseInt(r.getAttribute("y"),10),n=parseInt(r.getAttribute("c"),10),a=(K(t,"Compression")||"none").toLowerCase();if(!ee.has(a))throw new $("mrf:open","currently does not support compression "+a);const l=K(t,"DataType")||"UInt8",o=Y.get(l);if(o==null)throw new $("mrf:open","currently does not support pixel type "+l);const c=V(t,"PageSize"),u=parseInt(c.getAttribute("x"),10),h=parseInt(c.getAttribute("y"),10),f=V(t,"DataValues");let m,y;if(f&&(y=f.getAttribute("NoData"),y!=null&&(m=y.trim().split(" ").map(M=>parseFloat(M)))),V(e,"MRF_META/CachedSource"))throw new $("mrf:open","currently does not support MRF referencing other data files");const g=V(e,"MRF_META/GeoTags"),d=V(g,"BoundingBox");let p,I=!1;if(d!=null){const M=parseFloat(d.getAttribute("minx")),B=parseFloat(d.getAttribute("miny")),N=parseFloat(d.getAttribute("maxx")),O=parseFloat(d.getAttribute("maxy")),H=K(g,"Projection")||"";let L=q.WGS84;if(H!=="LOCAL_CS[]")if(H.toLowerCase().startsWith("epsg:")){const J=Number(H.slice(5));isNaN(J)||J===0||(L=new q({wkid:J}))}else L=(P=ve(H))!=null?P:q.WGS84;else I=!0,L=new q({wkid:3857});p=new G(M,B,N,O),p.spatialReference=L}else I=!0,p=new G({xmin:-.5,ymin:.5-s,xmax:i-.5,ymax:.5,spatialReference:new q({wkid:3857})});const x=V(e,"MRF_META/Rsets"),F=parseInt(x&&x.getAttribute("scale")||"2",10),T=p.spatialReference,_=new pe({origin:new j({x:p.xmin,y:p.ymax,spatialReference:T}),blockWidth:u,blockHeight:h,pyramidBlockWidth:u,pyramidBlockHeight:h,compression:a,pyramidScalingFactor:F}),S=new j({x:p.width/i,y:p.height/s,spatialReference:T}),C=new ye({width:i,height:s,extent:p,isPseudoSpatialReference:I,spatialReference:T,bandCount:n,pixelType:o,pixelSize:S,noDataValue:m,storageInfo:_}),R=K(e,"datafile"),v=K(e,"IndexFile");return{rasterInfo:C,files:{mrf:this.url,index:v||this.url.replace(".mrf",".idx"),data:R||this.url.replace(".mrf",ee.get(a).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e==null?void 0:e.signal});return Je(t)}catch{return null}}};w([b()],oe.prototype,"_files",void 0),w([b()],oe.prototype,"_storageIndex",void 0),w([b({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),oe=w([Q("esri.layers.support.rasterIO.MRFRaster")],oe);const Li=oe,Me=(e,t)=>{var r;return(r=e.get(t))==null?void 0:r.values},ce=(e,t)=>{var r,i;return(i=(r=e.get(t))==null?void 0:r.values)==null?void 0:i[0]};let re=class extends ae{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){await this.init();const t=e?X(e.signal):null,{data:r}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!r)throw new $("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:i,firstIFDPos:s,isBigTiff:n}=ni(r),a=[];await this._readIFDs(a,r,i,s,0,n?8:4,t);const{imageInfo:l,rasterInfo:o}=this._parseIFDs(a),c=ai(a),u=oi(a);if(this._headerInfo={littleEndian:i,isBigTiff:n,ifds:a,pyramidIFDs:c,maskIFDs:u,...l},this._set("rasterInfo",o),!l.isSupported)throw new $("tiffraster:open","this tiff is not supported: "+l.message);if(!l.tileWidth)throw new $("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");const{skipExtensions:h=[]}=this.ioConfig;if(!h.includes("aux.xml")){const f=await this._fetchAuxiliaryMetaData(e);f!=null&&this._processPAMInfo(f,o)}h.includes("vat.dbf")||o.bandCount!==1||o.pixelType!=="u8"||(o.attributeTable=await this._fetchAuxiliaryTable(e),k(o.attributeTable)&&(o.keyProperties.DataType="thematic")),this.updateTileInfo()}async fetchRawTile(e,t,r,i={}){var n;if(!((n=this._headerInfo)!=null&&n.isSupported)||this.isBlockOutside(e,t,r))return null;const s=await this._fetchRawTiffTile(e,t,r,!1,i);if(k(s)&&this._headerInfo.hasMaskBand){const a=await this._fetchRawTiffTile(e,t,r,!0,i);k(a)&&a.pixels[0]instanceof Uint8Array&&(s.mask=a.pixels[0])}return s}_parseIFDs(e){var M,B;const t=li(e),{width:r,height:i,tileWidth:s,tileHeight:n,planes:a,pixelType:l,compression:o,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidBlockWidth:h,pyramidBlockHeight:f,tileBoundary:m,affine:y,metadata:g}=t,d=((M=t.extent.spatialReference)==null?void 0:M.wkt)||((B=t.extent.spatialReference)==null?void 0:B.wkid);let p=ve(d),I=!!t.isPseudoGeographic;p==null&&(I=!0,p=new q({wkid:3857}));const x=new G({...t.extent,spatialReference:p}),F=new j(x?{x:x.xmin,y:x.ymax,spatialReference:p}:{x:0,y:0}),T=new pe({blockWidth:s,blockHeight:n,pyramidBlockWidth:h,pyramidBlockHeight:f,compression:o,origin:F,firstPyramidLevel:c,maximumPyramidLevel:u,blockBoundary:m}),_=new j({x:(x.xmax-x.xmin)/r,y:(x.ymax-x.ymin)/i,spatialReference:p}),S=g?{BandProperties:g.bandProperties,DataType:g.dataType}:{};let C=null;const R=ce(e[0],"PHOTOMETRICINTERPRETATION"),v=Me(e[0],"COLORMAP");if(R<=3&&(v==null?void 0:v.length)>3&&v.length%3==0){C=[];const N=v.length/3;for(let O=0;O<N;O++)C.push([O,v[O]>>>8,v[O+N]>>>8,v[O+2*N]>>>8])}const P=new ye({width:r,height:i,bandCount:a,pixelType:l,pixelSize:_,storageInfo:T,spatialReference:p,isPseudoSpatialReference:I,keyProperties:S,extent:x,colormap:C,statistics:g?g.statistics:null});return y!=null&&y.length&&(P.nativeExtent=new G({xmin:-.5,ymin:.5-i,xmax:r-.5,ymax:.5,spatialReference:p}),P.transform=new ze({polynomialOrder:1,forwardCoefficients:[y[2]+y[0]/2,y[5]-y[3]/2,y[0],y[3],-y[1],-y[4]]}),P.extent=P.transform.forwardTransform(P.nativeExtent),P.pixelSize=new j({x:(x.xmax-x.xmin)/r,y:(x.ymax-x.ymin)/i,spatialReference:p}),T.origin.x=-.5,T.origin.y=.5),{imageInfo:t,rasterInfo:P}}_processPAMInfo(e,t){var r;if(t.statistics=(r=e.statistics)!=null?r:t.statistics,t.histograms=e.histograms,e.histograms&&D(t.statistics)&&(t.statistics=Ee(e.histograms)),e.transform&&D(t.transform)){t.transform=e.transform,t.nativeExtent=t.extent;const i=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new j({x:(i.xmax-i.xmin)/t.width,y:(i.ymax-i.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=i}t.isPseudoSpatialReference&&e.spatialReference&&(t.spatialReference=e.spatialReference)}async _readIFDs(e,t,r,i,s,n=4,a){if(!i)return null;(i>=t.byteLength||i<0)&&(t=(await this.request(this.url,{range:{from:i+s,to:i+s+this._bufferSize},responseType:"array-buffer",signal:a})).data,s=i+s,i=0);const l=await this._readIFD(t,r,i,s,Ie.TIFF_TAGS,n,a);if(e.push(l.ifd),!l.nextIFD)return null;await this._readIFDs(e,t,r,l.nextIFD-s,s,n,a)}async _readIFD(e,t,r,i,s=Ie.TIFF_TAGS,n=4,a){var o,c;if(!e)return null;const l=ci(e,t,r,i,s,n);if(l.success){const u=[];if((o=l.ifd)==null||o.forEach(h=>{h.values||u.push(h)}),u.length>0){const h=u.map(m=>m.offlineOffsetSize).filter(k),f=Math.min.apply(null,h.map(m=>m[0]));if(Math.min.apply(null,h.map(m=>m[0]+m[1]))-f<=this._bufferSize){const{data:m}=await this.request(this.url,{range:{from:f,to:f+this._bufferSize},responseType:"array-buffer",signal:a});e=m,i=f,u.forEach(y=>ui(e,t,y,i))}}if((c=l.ifd)!=null&&c.has("GEOKEYDIRECTORY")){const h=l.ifd.get("GEOKEYDIRECTORY"),f=h==null?void 0:h.values;if(f&&f.length>4){const m=f[0]+"."+f[1]+"."+f[2],y=await this._readIFD(e,t,h.valueOffset+6-i,i,Ie.GEO_KEYS,2,a);h.data=y.ifd,h.data&&h.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[m]})}}return l}if(l.requiredBufferSize&&l.requiredBufferSize!==e.byteLength)return(e=(await this.request(this.url,{range:{from:i,to:i+l.requiredBufferSize+4},responseType:"array-buffer",signal:a})).data).byteLength<l.requiredBufferSize?null:this._readIFD(e,t,0,i,Ie.TIFF_TAGS,4,a)}async _fetchRawTiffTile(e,t,r,i,s={}){const n=this._getTileLocation(e,t,r,i);if(!n)return null;const{ranges:a,actualTileWidth:l,actualTileHeight:o,ifd:c}=n,u=a.map(_=>this.request(this.url,{range:_,responseType:"array-buffer",signal:s.signal})),h=await Promise.all(u),f=h.map(_=>_.data.byteLength).reduce((_,S)=>_+S),m=h.length===1?h[0].data:new ArrayBuffer(f),y=[0],g=[0];if(h.length>1){const _=new Uint8Array(m);for(let S=0,C=0;S<h.length;S++){const R=h[S].data;_.set(new Uint8Array(R),C),y[S]=C,C+=R.byteLength,g[S]=R.byteLength}}const{blockWidth:d,blockHeight:p}=this.getBlockWidthHeight(e),I=await this.decodePixelBlock(m,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:y,sizes:g},width:d,height:p,planes:null,pixelType:null});if(I==null)return null;let x,F,T;if(l!==d||o!==p){let _=I.mask;if(_)for(x=0;x<p;x++)if(T=x*d,x<o)for(F=l;F<d;F++)_[T+F]=0;else for(F=0;F<d;F++)_[T+F]=0;else for(_=new Uint8Array(d*p),I.mask=_,x=0;x<o;x++)for(T=x*d,F=0;F<l;F++)_[T+F]=1}return I}_getTileLocation(e,t,r,i=!1){const{firstPyramidLevel:s,blockBoundary:n}=this.rasterInfo.storageInfo,a=e===0?0:e-(s-1),{_headerInfo:l}=this;if(!l)return null;const o=i?l.maskIFDs[a]:a===0?l==null?void 0:l.ifds[0]:l==null?void 0:l.pyramidIFDs[a-1];if(!o)return null;const c=hi(o,l),u=Me(o,"TILEOFFSETS");if(u===void 0)return null;const h=Me(o,"TILEBYTECOUNTS"),{minRow:f,minCol:m,maxRow:y,maxCol:g}=n[a];if(t>y||r>g||t<f||r<m)return null;const d=ce(o,"IMAGEWIDTH"),p=ce(o,"IMAGELENGTH"),I=ce(o,"TILEWIDTH"),x=ce(o,"TILELENGTH"),F=c?this.rasterInfo.bandCount:1,T=F*t*(g+1)+r,_=[{from:u[T],to:u[T+F-1]+h[T+F-1]-1}];if(c){let R=!0;for(let v=0;v<F;v++)if(u[T+v]+h[T+v]!==u[T+v+1]){R=!1;break}if(!R)for(let v=0;v<F;v++)_[v]={from:u[T+v],to:u[T+v]+h[T+v]-1}}const S=u[T],C=h[T];return S==null||C==null?null:{ranges:_,ifd:o,actualTileWidth:r===g&&d%I||I,actualTileHeight:t===y&&p%x||x}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e==null?void 0:e.signal});return Je(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e==null?void 0:e.signal}),r=ht.parse(t);return r!=null&&r.recordSet?at.fromJSON(r.recordSet):null}catch{return null}}};w([b()],re.prototype,"_files",void 0),w([b()],re.prototype,"_headerInfo",void 0),w([b()],re.prototype,"_bufferSize",void 0),w([b({type:String,json:{write:!0}})],re.prototype,"datasetFormat",void 0),re=w([Q("esri.layers.support.rasterDatasets.TIFFRaster")],re);const Ai=re,W=new Map;W.set("CRF",{desc:"Cloud Raster Format",constructor:Bi}),W.set("MRF",{desc:"Meta Raster Format",constructor:Li}),W.set("TIFF",{desc:"GeoTIFF",constructor:Ai}),W.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Hi}),W.set("JPG",{desc:"JPG Raster Format",constructor:Se}),W.set("PNG",{desc:"PNG Raster Format",constructor:Se}),W.set("GIF",{desc:"GIF Raster Format",constructor:Se}),W.set("BMP",{desc:"BMP Raster Format",constructor:Se});class Wi{static get supportedFormats(){const t=new Set;return W.forEach((r,i)=>t.add(i)),t}static async open(t){const{url:r,ioConfig:i,sourceJSON:s}=t;let n=t.datasetFormat;n==null&&r.lastIndexOf(".")&&(n=r.slice(r.lastIndexOf(".")+1).toUpperCase()),n==="OVR"||n==="TIF"?n="TIFF":n!=="JPG"&&n!=="JPEG"&&n!=="JFIF"||(n="JPG"),r.toLowerCase().includes("/imageserver")&&!r.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const a={url:r,sourceJSON:s,datasetFormat:n,ioConfig:i!=null?i:{bandIds:null,sampling:null}};let l,o;if(n&&this.supportedFormats.has(n)){if(n==="CRF"&&!(i!=null&&i.enableCRF))throw new $("rasterfactory:open",`cannot open raster: ${r}`);return l=W.get(n).constructor,o=new l(a),await o.open({signal:t.signal}),o}if(n)throw new $("rasterfactory:open","not a supported format "+n);const c=Array.from(W.keys());let u=0;const h=()=>(n=c[u++],n&&(n!=="CRF"||(i==null?void 0:i.enableCRF))?(l=W.get(n).constructor,o=new l(a),o.open({signal:t.signal}).then(()=>o).catch(()=>h())):null);return h()}static register(t,r,i){W.has(t.toUpperCase())||W.set(t.toUpperCase(),{desc:r,constructor:i})}}let z=class extends Rt(vt(Tt(_t(Ft(Oi(kt(Ct(Pt(Mt(Ht)))))))))){constructor(...e){super(...e),this._primaryRasters=null,this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=k(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch($t).then(()=>this._openRaster(t))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var l;let e=[new de({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const{rasterInfo:t}=this,r=t==null?void 0:t.attributeTable,i=k(r)?r.fields:null,s="Raster.";if(i){const o=i.filter(c=>c.type!=="oid"&&c.name.toLowerCase()!=="value").map(c=>{const u=c.clone();return u.name=s+c.name,u});e=e.concat(o)}const n=t==null?void 0:t.dataType,a=t==null?void 0:t.multidimensionalInfo;if((n==="vector-magdir"||n==="vector-uv")&&k(a)){const o=(l=a.variables[0].unit)==null?void 0:l.trim(),c="Magnitude"+(o?` (${o})`:"");e.push(new de({name:"Raster.Magnitude",alias:c,domain:null,editable:!1,type:"double"})),e.push(new de({name:"Raster.Direction",alias:"Direction (\xB0)",domain:null,editable:!1,type:"double"}))}return e}set renderer(e){this._set("renderer",e),this.updateRenderer()}readRenderer(e,t,r){const i=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,s=Gt(i,r)||void 0;if(s!=null)return s}createPopupTemplate(e){return Ot({fields:this.rasterFields,title:this.title},e)}async generateRasterInfo(e,t){if(!(e=it($e,e)))return this._primaryRasters[0].rasterInfo;try{const r={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(n=>r[n.url]=n);const i=Oe(e.toJSON(),r),s=new De({rasterFunction:i});return await s.open(t),s.rasterInfo}catch{return null}}write(e,t){const{raster:r}=this;if(this.loaded?r.datasetFormat==="RasterTileServer"&&(r.tileType==="Raster"||r.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const i=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new $("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${i}'`,{layer:this}))}return null}async _openRaster(e){var i;let t=!1;if(this.raster)this.raster.rasterInfo||await this.raster.open(),this.raster.datasetFormat==="Function"?(t=!0,this._primaryRasters=this.raster.primaryRasters.rasters):this._primaryRasters=[this.raster],this.url=this.raster.url;else{const{rasterFunction:s}=this,n=[this.url];s&&Mi(s.toJSON(),n);const a=await Promise.all(n.map(o=>Wi.open({url:o,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e}))),l=a.findIndex(o=>o==null);if(l>-1)throw new $("imagery-tile-layer:open",`cannot open raster: ${n[l]}`);if(this._primaryRasters=a,s){const o={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(h=>o[h.url]=h);const c=Oe((i=s.rasterFunctionDefinition)!=null?i:s.toJSON(),o),u=new De({rasterFunction:c});try{await u.open(),this.raster=u}catch(h){const f=Be.getLogger(this.declaredClass);h instanceof $&&f.error("imagery-tile-layer:open",h.message),f.warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=a[0]}}else this.raster=a[0]}const r=this.raster.rasterInfo;if(!r)throw new $("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("rasterInfo",t?r:this._primaryRasters[0].rasterInfo),this._set("spatialReference",r.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const s=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(s,{origin:"service"})}this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(Dt(()=>this.customParameters,s=>{this.raster&&(this.raster.ioConfig.customFetchParameters=s)}))}};w([b()],z.prototype,"_primaryRasters",void 0),w([b({type:[Bt],json:{write:{overridePolicy(){var e;return{enabled:!this.loaded||this.raster.tileType==="Raster"||((e=this.bandIds)==null?void 0:e.join(","))!=="0,1,2"}}}}})],z.prototype,"bandIds",void 0),w([b({json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.interpolation!=="bilinear"}}}}}),Et(Ut)],z.prototype,"interpolation",void 0),w([b(zt)],z.prototype,"legendEnabled",void 0),w([b({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],z.prototype,"isReference",void 0),w([b({type:["show","hide"]})],z.prototype,"listMode",void 0),w([b({json:{read:!0,write:!0}})],z.prototype,"blendMode",void 0),w([b()],z.prototype,"sourceJSON",void 0),w([b({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],z.prototype,"version",void 0),w([b({readOnly:!0,json:{read:!1}})],z.prototype,"type",void 0),w([b({type:["ArcGISTiledImageServiceLayer"]})],z.prototype,"operationalLayerType",void 0),w([b({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(e,t,r){t[r]=!e}}}})],z.prototype,"popupEnabled",void 0),w([b({type:Jt,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],z.prototype,"popupTemplate",void 0),w([b({readOnly:!0})],z.prototype,"defaultPopupTemplate",null),w([b({readOnly:!0,type:[de]})],z.prototype,"fields",void 0),w([b({readOnly:!0,type:[de]})],z.prototype,"rasterFields",null),w([b({types:lt,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){var t;const e=((t=this.renderer)==null?void 0:t.type)==="raster-stretch"&&this.renderer.stretchType==="none"&&!this.renderer.useGamma;return{enabled:!this.loaded||this.raster.tileType==="Raster"||!e}}},origins:{"web-scene":{types:Vt,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"&&e.type!=="flow"})}}}}})],z.prototype,"renderer",null),w([Nt("renderer")],z.prototype,"readRenderer",null),z=w([Q("esri.layers.ImageryTileLayer")],z);const Zi=z;export{Zi as default};
