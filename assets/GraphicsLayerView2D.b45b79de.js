import{a as p,g as a,F as o,r as g,e as s,y as m,b as l}from"./index.a33ecea7.js";import{f as c}from"./LayerView2D.d9ef92c2.js";import{i as n}from"./GraphicContainer.910344c7.js";import{a as d}from"./GraphicsView2D.8c9440ff.js";import{u}from"./LayerView.88bcfa48.js";import"./Container.5f323bc4.js";import"./EffectView.f5ec831b.js";import"./definitions.618cbc79.js";import"./enums.a12f2baf.js";import"./BaseGraphicContainer.cb1cac6c.js";import"./FeatureContainer.12b5d67c.js";import"./AttributeStoreView.6e83daf7.js";import"./visualVariablesUtils.300ac9ef.js";import"./color.d55e9401.js";import"./number.e821bc3e.js";import"./visualVariablesUtils.88d0eb69.js";import"./TileContainer.432071cb.js";import"./WGLContainer.5bbfc124.js";import"./WGLBrushVTLSymbol.4ddaefec.js";import"./StyleDefinition.630dd2fa.js";import"./GeometryUtils.b69b6363.js";import"./ShaderCompiler.915a06d7.js";import"./ProgramTemplate.6d98fd14.js";import"./MaterialKey.23a3bc73.js";import"./alignmentUtils.cba6cd73.js";import"./utils.28eb7bc1.js";import"./heatmapTextureUtils.e4986b56.js";import"./cimAnalyzer.32b2260b.js";import"./fontUtils.401be2b9.js";import"./BidiEngine.8d79ab2c.js";import"./GeometryUtils.b33f0569.js";import"./Rect.85ff00e1.js";import"./normalizeUtilsSync.a99dd2fa.js";import"./Matcher.91da54bc.js";import"./tileUtils.b5739863.js";import"./TurboLine.9c04f89e.js";import"./ExpandedCIM.1794ca2e.js";import"./schemaUtils.bac079cd.js";import"./createSymbolSchema.0ace72f9.js";import"./util.ca7e0ea2.js";import"./ComputedAttributeStorage.fd12c291.js";import"./arcadeTimeUtils.fe70ea3d.js";import"./centroid.5ec46060.js";import"./GraphicsView.69d359aa.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(u){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new d({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new n(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=p(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof a?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):o.isCollection(i)&&i.length>0&&(t=i.map(h=>h&&h.uid).toArray());const r=t==null?void 0:t.filter(g);return r!=null&&r.length?(this._addHighlight(r),{remove:()=>this._removeHighlight(r)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t);this._highlightIds.set(t,r+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t)-1;r===0?this._highlightIds.delete(t):this._highlightIds.set(t,r)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([m()],e.prototype,"graphicsView",void 0),e=s([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const ai=e;export{ai as default};
