import{pc as w,lG as y,pd as I,pe as V,fW as v,w as H,aV as T,u as p,eM as c,ae as q,e as o,y as g,b as U}from"./index.a33ecea7.js";import"./Rasterizer.dd2845f9.js";import"./EffectView.f5ec831b.js";import"./Container.5f323bc4.js";import"./BufferPool.e4d9a85e.js";import"./enums.a12f2baf.js";import"./WGLContainer.5bbfc124.js";import"./color.d55e9401.js";import"./MaterialKey.23a3bc73.js";import"./utils.28eb7bc1.js";import"./number.e821bc3e.js";import"./StyleDefinition.630dd2fa.js";import"./resolver.110e6527.js";import"./MagnifierPrograms.f6d8b0dd.js";import{a as Q}from"./GraphicsView2D.8c9440ff.js";import"./AttributeStoreView.6e83daf7.js";import{t as b,o as f,n as d}from"./imageUtils.dc05acc3.js";import{f as S}from"./LayerView2D.d9ef92c2.js";import{n as C}from"./HighlightGraphicContainer.3fd97f5c.js";import{u as k}from"./LayerView.88bcfa48.js";import{i as F}from"./RefreshableLayerView.e0df9b3f.js";import{P as G,S as P}from"./MapServiceLayerViewHelper.5c9468d6.js";import"./_commonjsHelpers.557d737c.js";import"./cimAnalyzer.32b2260b.js";import"./fontUtils.401be2b9.js";import"./BidiEngine.8d79ab2c.js";import"./GeometryUtils.b33f0569.js";import"./alignmentUtils.cba6cd73.js";import"./definitions.618cbc79.js";import"./Rect.85ff00e1.js";import"./rasterizingUtils.a4b9dda6.js";import"./WGLBrushVTLSymbol.4ddaefec.js";import"./GeometryUtils.b69b6363.js";import"./ShaderCompiler.915a06d7.js";import"./ProgramTemplate.6d98fd14.js";import"./heatmapTextureUtils.e4986b56.js";import"./imageutils.5e5bb181.js";import"./Matcher.91da54bc.js";import"./visualVariablesUtils.300ac9ef.js";import"./visualVariablesUtils.88d0eb69.js";import"./tileUtils.b5739863.js";import"./TurboLine.9c04f89e.js";import"./ExpandedCIM.1794ca2e.js";import"./CircularArray.155c6653.js";import"./ComputedAttributeStorage.fd12c291.js";import"./arcadeTimeUtils.fe70ea3d.js";import"./centroid.5ec46060.js";import"./normalizeUtilsSync.a99dd2fa.js";import"./schemaUtils.bac079cd.js";import"./createSymbolSchema.0ace72f9.js";import"./util.ca7e0ea2.js";import"./GraphicsView.69d359aa.js";import"./BitmapTileContainer.11830d5f.js";import"./Bitmap.0ee5b9a3.js";import"./TileContainer.432071cb.js";import"./BaseGraphicContainer.cb1cac6c.js";import"./FeatureContainer.12b5d67c.js";import"./floorFilterUtils.095bd939.js";import"./popupUtils.5d07a4ea.js";const R=[0,0];let h=class extends F(b(S(k))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,i)=>this.fetchTile(e,i)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),G(this,this.layer)){const e=this._highlightView=new Q({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new C(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new P({createFetchPopupFeaturesQueryGeometry:(i,r)=>v(i,r,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(i,r)=>{e.graphicUpdateHandler({graphic:i,property:r})},layerView:this,updatingHandles:this.updatingHandles})}this.requestUpdate(),this.addAttachHandles(H(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):{remove(){}}}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return T((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(t=>this._enqueueTileFetch(t)))}isUpdating(){var t,e;return(e=(t=this._fetchQueue)==null?void 0:t.updating)!=null?e:!1}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(R,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(e),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:n=0}=e;if(!i)try{return await this._fetchImage(t,r)}catch(s){if(!p(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(n<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){const m=new c(u),_=await this.fetchTile(m,{...e,resamplingLevel:n+1});return d(this._tileInfoView,_,m,t)}}throw s}const a=new c(0,0,0,0);let l;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,a,{signal:r}),a.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);l=await this._fetchImage(a,r)}catch(s){if(p(s))throw s;l=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,l,a,t):l}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){p(e)||q.getLogger(this.declaredClass).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};o([g()],h.prototype,"_fetchQueue",void 0),o([g()],h.prototype,"resampling",null),h=o([U("esri.views.2d.layers.TileLayerView2D")],h);const jt=h;export{jt as default};
