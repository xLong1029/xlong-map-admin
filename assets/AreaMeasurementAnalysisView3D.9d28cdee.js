import{ak as c,i4 as ze,gY as te,a$ as Re,lJ as Te,jC as J,lK as Ie,l7 as je,cV as he,bG as Ee,lL as Ue,lM as We,lN as le,lO as ke,lP as de,ah as Fe,l6 as Ne,kR as qe,hX as Q,cB as ce,iu as R,aQ as ee,aP as pe,aO as ge,lQ as Be,lR as He,bj as Ke,lS as Qe,dO as ue,lT as me,lU as Xe,lV as Ze,dj as Ye,lW as Je,lX as et,lY as tt,r as _,lZ as st,l_ as it,l$ as se,ad as Ge,m0 as rt,e as o,y as l,b as Z,d as ae,w as E,U as _e,m1 as nt,m2 as at,ae as ot,Y as ht,t as De,aj as Le,a as v,eq as lt,G as ie,m3 as dt,i as U,m4 as ye,m5 as ct,m6 as pt,n as j,m7 as gt,aR as ut,j3 as mt,jn as _t,gp as x,j8 as fe,m8 as Lt,kG as yt,m9 as ve,ma as ft,mb as W,j9 as vt,bp as St,mc as wt,bR as q,jb as Ct,jc as bt,jd as Pt,je as At,md as Mt,me as $t,kN as Vt,mf as Rt,jg as Gt,ja as G,jh as Dt,mg as xt,br as Se,bs as B,mh as Ot,mi as zt,ju as Tt,jq as It,c0 as xe,hN as X,mj as $,cZ as jt,mk as we,im as Ce,hK as Et,go as Ut,gq as be,l as z,ml as H,mm as Wt,gQ as kt,mn as Ft,mo as Nt,mp as qt,mq as Bt,mr as Ht,ms as Kt,kD as Qt,mt as Xt,mu as Zt,mv as Yt,mw as Jt,mx as es,my as ts}from"./index.a33ecea7.js";import{n as ss}from"./AnalysisView3D.90f8a454.js";import{a as T,o as Pe,v as is,g as Ae}from"./quantityFormatUtils.f35d4e58.js";import{c as re,t as rs}from"./UnitNormalizer.471b9743.js";import{v as Me}from"./euclideanAreaMeasurementUtils.cab0339e.js";import{a as ns,n as as,g as I}from"./LineVisualElement.ea11337b.js";import{g as K,m as $e,f as ne}from"./Segment.05ff5003.js";class os{constructor(e,s){this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.areaCentroidWorldCoords=c(),this.areaCentroidRenderCoords=c(),this.geodesicAreaCentroidRenderCoords=c(),this.area=null,this.geodesicArea=null,this.pathLength=null,this.geodesicPathLength=null,this.perimeterLength=null,this._length=0,this._centroidRenderCoords=c(),this._planeWorldCoords=ze(),this._worldUp=c(),this._worldTangent=c(),this._frame=[c(),c(),c()],this._pathVersion=-1,this._validMeasurement=!1,this._hasCursorPoint=!1,this._mode=null,this._tempU=c(),this._tempV=c(),this._tempVec3=c(),this._tempSphere={center:c(),radius:0},this._sceneView=e,this.unitNormalizer=s}update(e,s,i,r,a,n,h){const d=this.unitNormalizer,g=this._sceneView.renderSpatialReference,p=this.unitNormalizer.spatialReference,m=_(s);if(this._pathVersion===e.version&&this._validMeasurement===r&&!h&&this._hasCursorPoint===m&&this._mode===n)return!e.isValidPolygon&&(this._updateCursorSegmentLength(e,s),!0);this._pathVersion=e.version,this._validMeasurement=r,this._hasCursorPoint=m;const u=e.numVertices;this._resize(u);const f=te(i.spatialReference),C=Re(i.spatialReference,f)&&Te(i.spatialReference),{positionsGeographic:b,positionsWorldCoords:k,positionsRenderCoords:P,positionsSpherical:V}=this;e.forEachVertexPosition((y,w)=>{hs(i.elevationProvider,y),J(y,k[w],p),J(y,P[w],g),C&&(Ie(y,b[w]),J(y,V[w],f),je(V[w],V[w]))});const F=this._updatePathLengths(r);if(this.pathLength=this._length>1?T(d.normalizeDistance(F),"meters"):null,C){const y=this._updateGeodesicPathLengths(r,p);this.geodesicPathLength=this._length>1?T(y,"meters"):null}else this.geodesicPathLength=null;return this._updateCursorSegmentLength(e,s),this._updateMode(e,n),r?(this._updateArea(i,d,g,p,a),C&&this._updateGeodesicArea(i),!0):(this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),!0)}getData(){return{positionsWorldCoords:this.positionsWorldCoords,positionsRenderCoords:this.positionsRenderCoords,positionsProjectedWorldCoords:this.positionsProjectedWorldCoords,positionsFittedRenderCoords:this.positionsFittedRenderCoords,positionsGeographic:this.positionsGeographic,positionsSpherical:this.positionsSpherical,positionsStereographic:this.positionsStereographic,pathSegmentLengths:this.pathSegmentLengths,geodesicPathSegmentLengths:this.geodesicPathSegmentLengths,perimeterSegmentLengths:this.perimeterSegmentLengths,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidWorldCoords:this.areaCentroidWorldCoords,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,fittingMode:this.fittingMode,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,cursorSegmentLength:this.cursorSegmentLength,geodesicCursorSegmentLength:this.geodesicCursorSegmentLength,unitNormalizer:this.unitNormalizer,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(c()),this.positionsRenderCoords.push(c()),this.positionsProjectedWorldCoords.push(he()),this.positionsFittedRenderCoords.push(c()),this.positionsGeographic.push(c()),this.positionsSpherical.push(c()),this.positionsStereographic.push(he()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const s=this.positionsWorldCoords,i=this.pathSegmentLengths;let r=0;for(let a=0;a<this._length;++a){const n=i[a]=Ee(s[a],s[(a+1)%this._length]);(a<this._length-1||e)&&(r+=n)}return r}_updateGeodesicPathLengths(e,s){const i=this.positionsGeographic,r=this.geodesicPathSegmentLengths;let a=0;for(let n=0;n<this._length;++n){const h=r[n]=Ue(i[n],i[(n+1)%this._length],s!=null?s:void 0);(n<this._length-1||e)&&(a+=h)}return a}_updateArea(e,s,i,r,a){const n=e.renderCoordsHelper,h=this.positionsWorldCoords,d=this.positionsRenderCoords,g=this.positionsProjectedWorldCoords,p=this.positionsFittedRenderCoords,m=this._planeWorldCoords,u=this._centroidRenderCoords;re(d,u),n.worldUpAtPosition(u,this._worldUp),n.worldBasisAtPosition(u,We.X,this._worldTangent),le(u,this._worldUp,i,this._worldUp,r),le(u,this._worldTangent,i,this._worldTangent,r),h.length>2&&ke(h,m),this.fittingMode=this._selectFittingMode(m,h,this._worldUp,a);let f=0;if(this.fittingMode==="horizontal"){let y=-1/0;d.forEach((w,N)=>{const oe=n.getAltitude(d[N]);oe>y&&(y=oe,f=N)})}const C=h[f];let b=m,k=this._worldTangent;this.fittingMode==="horizontal"?b=this._worldUp:this.fittingMode==="vertical"&&(b=this._tempVec3,k=this._worldUp,de(m,this._worldUp,b)),Fe(this._frame[2],b),de(k,b,this._frame[0]),Ne(this._frame[1],this._frame[0],this._frame[2]),qe(this._frame[1],this._frame[1]);const P=this._tempVec3,V=this._tempU,F=this._tempV;for(let y=0;y<this._length;++y){const w=g[y],N=p[y];Q(P,h[y],C),ce(w,R(this._frame[0],P),R(this._frame[1],P)),ee(V,this._frame[0],w[0]),ee(F,this._frame[1],w[1]),pe(P,V,F),pe(P,P,C),ge(P,r,N,i)}this.perimeterLength=this._length>0?T(s.normalizeDistance(this._updatePerimeterLengths()),"meters"):null,re(p,this.areaCentroidRenderCoords),ge(this.areaCentroidRenderCoords,i,this.areaCentroidWorldCoords,r),this._updateIntersectingSegments(),this.area=this.intersectingSegments.size===0?Pe(s.normalizeArea(this._computeArea()),"square-meters"):null}_updateGeodesicArea(e){const{renderCoordsHelper:s,spatialReference:i}=e,{positionsSpherical:r,positionsStereographic:a}=this,n=this._tempVec3,h=Be(r,n);if(!h)return void(this.geodesicArea=null);const d=this._tempU,g=this._tempV;He(n,d,g);for(let p=0;p<this._length;++p){const m=R(r[p],d),u=R(r[p],g),f=R(r[p],n);ce(a[p],m/f,u/f)}ee(n,n,Ke(i).radius),s.toRenderCoords(n,te(i),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=h&&this.geodesicIntersectingSegments.size===0?Pe(this._computeGeodesicArea(),"square-meters"):null}_updatePerimeterLengths(){const e=this.positionsProjectedWorldCoords,s=this.perimeterSegmentLengths;let i=0;for(let r=0;r<this._length;++r)i+=s[r]=Qe(e[r],e[(r+1)%this._length]);return i}_updateIntersectingSegments(){const e=this.positionsProjectedWorldCoords,s=this.intersectingSegments;s.clear();for(let i=0;i<this._length;++i)for(let r=i+2;r<this._length;++r){if((r+1)%this._length===i)continue;const a=e[i],n=e[(i+1)%this._length],h=e[r],d=e[(r+1)%this._length];ue(a,n,h,d)&&(s.add(i),s.add(r))}}_computeArea(){const e=this.positionsProjectedWorldCoords,s=this.triangleIndices=me(Me(e));let i=0;for(let r=0;r<s.length;r+=3)i+=Xe(e[s[r]],e[s[r+1]],e[s[r+2]]);return i}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,s=this.geodesicIntersectingSegments;s.clear();for(let i=0;i<this._length;++i)for(let r=i+2;r<this._length;++r){if((r+1)%this._length===i)continue;const a=e[i],n=e[(i+1)%this._length],h=e[r],d=e[(r+1)%this._length];ue(a,n,h,d)&&(s.add(i),s.add(r))}}_computeGeodesicArea(){const e=this.positionsGeographic,s=this.positionsStereographic,i=this.geodesicTriangleIndices=me(Me(s));let r=0;for(let a=0;a<i.length;a+=3)r+=Ze(e[i[a]],e[i[a+1]],e[i[a+2]],Ye.WGS84);return r}_selectFittingMode(e,s,i,r){const a=s.map(p=>Math.abs(Je(e,p))).reduce((p,m)=>Math.max(p,m),0);et(s,this._tempSphere);const n=a/(2*this._tempSphere.radius),h=n<r.maxRelativeErrorCoplanar,d=n<r.maxRelativeErrorAlmostCoplanar;let g="horizontal";return h?g="oblique":d&&(g=Math.abs(R(i,e))>Math.cos(tt(r.verticalAngleThreshold))?"horizontal":"vertical"),g}_updateCursorSegmentLength(e,s){const i=e.lastPoint;!e.isValidPolygon&&_(i)&&_(s)?(this.geodesicCursorSegmentLength=T(st(i,s),"meters"),this.cursorSegmentLength=T(this.unitNormalizer.normalizeDistance(it(i,s,this.unitNormalizer.spatialReference)),"meters")):(this.geodesicCursorSegmentLength=null,this.cursorSegmentLength=null)}_updateMode(e,s){if(s===se.Auto){this.actualMeasurementMode="euclidean";let i=0;this.geodesicPathLength!=null&&(i+=this.geodesicPathLength.value),!e.isValidPolygon&&_(this.geodesicCursorSegmentLength)&&(i+=this.geodesicCursorSegmentLength.value),i>ls&&(this.actualMeasurementMode="geodesic")}else this.actualMeasurementMode=s===se.Euclidean?"euclidean":"geodesic";this.geodesicPathLength==null&&(this.actualMeasurementMode="euclidean"),this._mode=s}}function hs(t,e){e.hasZ||(e.z=Ge(rt(t,e,"ground"),0))}const ls=1e5;let D=class extends ae{constructor(t){super(t)}initialize(){const t=this.view.spatialReference,e=te(t),s=e===nt?at:e,i=!t||Re(t,s)?s:t,r=new rs(i);this._measurementDataManager=new os(this.view,r),this.addHandles([this.analysisViewData.path.on("change",()=>this._update()),E(()=>this.analysisViewData.cursorPoint,()=>this._update(),_e),E(()=>this.analysisViewData.mode,()=>this._update(),_e)]),this._update()}_update(t=!1){const{analysisViewData:e,view:s}=this,i={maxRelativeErrorCoplanar:.005,maxRelativeErrorAlmostCoplanar:.01,verticalAngleThreshold:80};this._measurementDataManager.update(e.path,e.cursorPoint,s,e.validMeasurement,i,e.mode,t)&&(e.measurementData=this._measurementDataManager.getData())}};o([l({constructOnly:!0})],D.prototype,"view",void 0),o([l({constructOnly:!0})],D.prototype,"analysis",void 0),o([l({constructOnly:!0})],D.prototype,"analysisViewData",void 0),D=o([Z("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementController")],D);const Oe="esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurement3DPathHelper",ds=ot.getLogger(Oe);let A=class extends ht.EventedAccessor{constructor(t={}){super(t),this._handles=new De,this._version=0,this._internalGeometryChange=!1,this._extent=Le()}destroy(){this._handles=v(this._handles)}set areaMeasurement(t){this._set("areaMeasurement",t),_(t)&&_(this.view)&&this._initialize(t,this.view)}set view(t){this._set("view",t),_(t)&&_(this.areaMeasurement)&&this._initialize(this.areaMeasurement,t)}get constructed(){return _(this.areaMeasurement)&&_(this.view)}get version(){return this._version}get isValidPolygon(){return this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].isClosed()}get extent(){if(this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].vertices.length>0){const t=Le(this._extent);return this.forEachVertex(e=>{lt(t,e.pos)}),t}return null}get spatialReference(){return this.constructed?this._editGeometry.coordinateHelper.spatialReference:null}_initialize(t,e){this._handles.removeAll(),this._handles.add(E(()=>t.geometry,()=>{this._updateEditGeometryFromModelGeometry(t,e)},ie)),this._makeDirty(!0)}_makeDirty(t=!1){this.notifyChange("isValidPolygon"),this.notifyChange("initialized"),this.notifyChange("extent"),t&&this.notifyChange("numVertices")}_updateEditGeometryFromModelGeometry(t,e){if(this._version++,this._internalGeometryChange)return;this._handles.remove("EditGeometry");let s=t.geometry;if(_(s)){const i=dt(s,e.spatialReference);U(i)&&ns(t,s.spatialReference,ds),s=i}_(s)?this._editGeometryOperations=ye.fromGeometry(s,e.state.viewingMode):this._editGeometryOperations=new ye(new ct("polygon",pt(!0,!1,e.spatialReference))),this._makeDirty(!0),this.emit("change"),this._handles.add(this._editGeometry.on("change",i=>{this._makeDirty(i.addedVertices!=null||i.removedVertices!=null),this._internalGeometryChange=!0,t.geometry=this.numVertices>0?this._editGeometry.geometry:null,this._internalGeometryChange=!1}),"EditGeometry")}get _editGeometry(){return this._editGeometryOperations.data}get vertices(){const t=[];return this.forEachVertex(e=>{t.push(e)}),t}get numVertices(){return this.constructed&&this._editGeometry.components.length>0?this._editGeometry.components[0].vertices.length:0}get lastPoint(){if(this.constructed&&this._editGeometry.components.length>0){const t=this._editGeometry.components[0].getLastVertex();if(_(t))return this._editGeometry.coordinateHelper.vectorToPoint(t.pos)}return null}getVertex(t){if(!this.constructed||this._editGeometry.components.length===0||this._editGeometry.components[0].vertices.length===0)return null;const e=this._editGeometry.components[0].vertices[0];let s=e;do{if(s.index===t)return s;s=s.rightEdge.rightVertex}while(s!==e&&s!=null);return null}getVertexPositionAsPoint(t){return this._editGeometry.coordinateHelper.vectorToPoint(t.pos)}getVertexPositionAsPointFromIndex(t){return this._editGeometry.coordinateHelper.vectorToPoint(this.getVertex(t).pos)}forEachVertex(t){this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].iterateVertices(t)}forEachVertexPosition(t){const e=this._editGeometry.coordinateHelper;this.forEachVertex((s,i)=>{e.vectorToPoint(s.pos,Ve),t(Ve,i)})}clear(){_(this.areaMeasurement)&&(this.areaMeasurement.geometry=null)}add(t){if(!this.constructed)return null;if(this._editGeometry.components.length===0){const s=j(this.view);this._editGeometry.components.push(new gt(s.spatialReference,s.state.viewingMode))}const e=this._editGeometryOperations.appendVertex(this._editGeometry.coordinateHelper.pointToVector(t));return this.emit("change"),e}close(){if(!this.constructed||this._editGeometry.components.length===0)return null;const t=this._editGeometryOperations.closeComponent(this._editGeometry.components[0]);return this.emit("change"),t}ensureContains(t,e=""){let s=!1;if(this._editGeometry.components.forEach(i=>{i.iterateVertices(r=>{r===t&&(s=!0)})}),!s)throw new Error(`vertex doesnt exist ${e}`);return s}setVertexPosition(t,e){if(!this.constructed)return null;const s=this._editGeometryOperations.setVertexPosition(t,this._editGeometry.coordinateHelper.pointToVector(e));return this.emit("change"),s}equals(t){if(this.numVertices!==t.numVertices)return!1;let e=!0;return this.forEachVertexPosition((s,i)=>{const r=t.getVertexPositionAsPointFromIndex(i);s.equals(r)||(e=!1)}),!!e}};o([l({value:null})],A.prototype,"areaMeasurement",null),o([l({value:null})],A.prototype,"view",null),o([l()],A.prototype,"isValidPolygon",null),o([l()],A.prototype,"extent",null),o([l()],A.prototype,"spatialReference",null),o([l()],A.prototype,"numVertices",null),A=o([Z(Oe)],A);const Ve=new ut;function cs(t){const e=new mt;e.extensions.add("GL_OES_standard_derivatives");const{vertex:s,fragment:i}=e;return _t(s,t),e.attributes.add(x.POSITION,"vec3"),e.attributes.add(x.UV0,"vec2"),e.varyings.add("vUV","vec2"),t.hasMultipassTerrain&&e.varyings.add("depth","float"),s.code.add(fe`
    void main(void) {
      vUV = uv0;
      ${t.hasMultipassTerrain?"depth = (view * vec4(position, 1.0)).z;":""}
      gl_Position = proj * view * vec4(position, 1.0);
    }
  `),e.include(Lt,t),i.uniforms.add(new yt("size",r=>r.size)),i.uniforms.add(new ve("color1",r=>r.color1)),i.uniforms.add(new ve("color2",r=>r.color2)),i.include(ft),i.code.add(fe`
    void main() {
      ${t.hasMultipassTerrain?"terrainDepthTest(gl_FragCoord, depth);":""}
      vec2 uvScaled = vUV / (2.0 * size);

      vec2 uv = fract(uvScaled - 0.25);
      vec2 ab = clamp((abs(uv - 0.5) - 0.25) / fwidth(uvScaled), -0.5, 0.5);
      float fade = smoothstep(0.25, 0.5, max(fwidth(uvScaled.x), fwidth(uvScaled.y)));
      float t = mix(abs(ab.x + ab.y), 0.5, fade);

      gl_FragColor = mix(color2, color1, t);
      ${t.transparencyPassType===W.Color?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}
    }
  `),e}const ps=Object.freeze(Object.defineProperty({__proto__:null,build:cs},Symbol.toStringTag,{value:"Module"}));class Y extends Ct{initializeProgram(e){return new bt(e.rctx,Y.shader.get().build(this.configuration),Pt)}_setPipelineState(e){const s=this.configuration,i=e===W.NONE,r=e===W.FrontFace;return At({blending:s.transparent?i?us:Mt(e):null,depthTest:{func:$t(e)},depthWrite:i?s.writeDepth?Vt:null:Rt(e),colorWrite:Gt,polygonOffset:i||r?s.polygonOffset?gs:null:{factor:-1,units:-25}})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}Y.shader=new vt(ps,()=>St(()=>import("./CheckerBoard.glsl.7eb2958d.js"),["assets/CheckerBoard.glsl.7eb2958d.js","assets/index.a33ecea7.js","assets/index.56d92a5e.css","assets/AnalysisView3D.90f8a454.js","assets/quantityFormatUtils.f35d4e58.js","assets/UnitNormalizer.471b9743.js","assets/euclideanAreaMeasurementUtils.cab0339e.js","assets/measurementUtils.43da56cb.js","assets/LineVisualElement.ea11337b.js","assets/Segment.05ff5003.js","assets/TextOverlayItem.90d2b48f.js"]));const gs={factor:0,units:-25},us=wt(q.SRC_ALPHA,q.ONE,q.ONE_MINUS_SRC_ALPHA,q.ONE_MINUS_SRC_ALPHA);class M extends Dt{constructor(){super(...arguments),this.transparencyPassType=W.NONE,this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1,this.hasMultipassTerrain=!1,this.cullAboveGround=!1}}o([G({count:W.COUNT})],M.prototype,"transparencyPassType",void 0),o([G()],M.prototype,"transparent",void 0),o([G()],M.prototype,"writeDepth",void 0),o([G()],M.prototype,"polygonOffset",void 0),o([G()],M.prototype,"hasMultipassTerrain",void 0),o([G()],M.prototype,"cullAboveGround",void 0);class ms extends xt{constructor(e){super(e,new Ls),this._configuration=new M}dispose(){}getConfiguration(e,s){return this._configuration.transparent=this.parameters.transparent,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.polygonOffset=this.parameters.polygonOffset,this._configuration.transparencyPassType=s.transparencyPassType,this._configuration.hasMultipassTerrain=s.multipassTerrain.enabled,this._configuration.cullAboveGround=s.multipassTerrain.cullAboveGround,this._configuration}requiresSlot(e,s){return s===Se.Color||s===Se.Alpha?e===(this.parameters.transparent?this.parameters.writeDepth?B.TRANSPARENT_MATERIAL:B.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL:B.OPAQUE_MATERIAL)||e===B.DRAPED_MATERIAL:!1}createGLMaterial(e){return new _s(e)}createBufferWriter(){return new Ot(zt)}}class _s extends Tt{beginSlot(e){return this.ensureTechnique(Y,e)}}class Ls extends It{constructor(){super(...arguments),this.size=xe(1,1),this.color1=X(.75,.75,.75,1),this.color2=X(.5,.5,.5,1),this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1}}class ys extends as{constructor(e){super(e),this._checkerBoardMaterial=null,this._renderOccluded=$.OccludeAndTransparent,this._geometry=null,this._size=xe(1,1),this._color1=X(1,.5,0,.5),this._color2=X(1,1,1,.5),this.applyProps(e)}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this._geometryChanged()}get size(){return this._size}set size(e){jt(this._size,e),this._updateMaterial()}get color1(){return this._color1}set color1(e){we(e,this._color1)||(Ce(this._color1,e),this._updateMaterial())}get color2(){return this._color2}set color2(e){we(e,this._color2)||(Ce(this._color2,e),this._updateMaterial())}_updateMaterial(){_(this._checkerBoardMaterial)&&this._checkerBoardMaterial.setParameters({size:this._size,color1:this._color1,color2:this._color2,renderOccluded:this._renderOccluded})}createExternalResources(){this._checkerBoardMaterial=new ms({size:this._size,color1:this._color1,color2:this._color2,transparent:!0,writeDepth:!1,polygonOffset:!0,renderOccluded:$.OccludeAndTransparent})}destroyExternalResources(){this._checkerBoardMaterial=null}forEachExternalMaterial(e){_(this._checkerBoardMaterial)&&e(this._checkerBoardMaterial)}createGeometries(e){if(U(this._geometry)||U(this._checkerBoardMaterial))return;const s=fs;Et(s,this.transform);const i=this._geometry,r=[],a=c();i.position.forEach(d=>{Q(a,d,s),r.push(a[0],a[1],a[2])});const n=[];i.uv.forEach(d=>{n.push(d[0],d[1])});const h=new Ut(this._checkerBoardMaterial,[[x.POSITION,new be(r,3,!0)],[x.UV0,new be(n,2,!0)]],[[x.POSITION,i.triangleIndices],[x.UV0,i.triangleIndices]]);e.addGeometry(h)}_geometryChanged(){this.recreateGeometry()}}const fs=c();let S=class extends ae{get visible(){return this.analysisViewData.visible}get testData(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel}}}constructor(t){super(t),this._handles=new De,this._params={pathLineColor:z.toUnitRGBA(H()),pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:z.toUnitRGBA(H()),perimeterLineWidth:2,projectionLineColor:z.toUnitRGBA(H()),projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:z.toUnitRGBA(H(.5)),areaColor2:z.toUnitRGBA(Wt(.5)),labelDistance:25},this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._pathLengthLabel=null,this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._cursorSegment=null,this._origin=c(),this._originTransform=kt(),this._cursorPositionRenderSpace=c(),this.messages=null,this.viewData=vs,this.areaLabel=null,this.perimeterLengthLabel=null,this.loadingMessages=!0}initialize(){const{analysisViewData:t,_params:e,view:s}=this;this._path=new I({view:s,attached:!0,width:e.pathLineWidth,color:e.pathLineColor,polygonOffset:!0,renderOccluded:$.OccludeAndTransparent}),this._intersectedPath=new I({view:s,attached:!0,width:e.pathLineWidth,color:e.intersectingLineColor,polygonOffset:!0,renderOccluded:$.OccludeAndTransparent}),this._perimeter=new I({view:s,attached:!0,width:e.perimeterLineWidth,color:e.perimeterLineColor,polygonOffset:!0,renderOccluded:$.OccludeAndTransparent}),this._intersectedPerimeter=new I({view:s,attached:!0,width:e.perimeterLineWidth,color:e.intersectingLineColor,polygonOffset:!0,renderOccluded:$.OccludeAndTransparent}),this._projectionLines=new I({view:s,attached:!0,width:e.projectionLineWidth,color:e.projectionLineColor,stipplePattern:Ft(e.projectionLineStippleSize),polygonOffset:!0,renderOccluded:$.OccludeAndTransparent}),this._measurementArea=new ys({view:s,attached:!0,color1:e.areaColor1,color2:e.areaColor2});const i={attached:!0,backgroundColor:Nt(.6),textColor:qt(),view:s};this._areaLabel=new K({...i,fontSize:O.Large}),this._pathLengthLabel=new K({...i,fontSize:O.Small}),this._cursorSegmentLengthLabel=new K({...i,fontSize:O.Small}),this._perimeterLengthLabel=new K({...i,fontSize:O.Small}),this._handles.add([E(()=>[t.mode,this.visible,t.unit,t.measurementData,t.cursorPoint],()=>this._update(),ie),E(()=>{var r;return(r=s.state)==null?void 0:r.camera},()=>this._updateLabels(),ie),Bt(()=>this._updateMessageBundle())]),this._updateMessageBundle()}destroy(){this._measurementArea=v(this._measurementArea),this._path=v(this._path),this._intersectedPath=v(this._intersectedPath),this._perimeter=v(this._perimeter),this._intersectedPerimeter=v(this._intersectedPerimeter),this._areaLabel=v(this._areaLabel),this._pathLengthLabel=v(this._pathLengthLabel),this._cursorSegmentLengthLabel=v(this._cursorSegmentLengthLabel),this._perimeterLengthLabel=v(this._perimeterLengthLabel),this._projectionLines=v(this._projectionLines),this._handles=v(this._handles),this.set("view",null)}_update(){if(this.destroyed||!this.view.ready||!this.view.renderCoordsHelper)return;const{analysisViewData:{measurementData:t},analysisViewData:e}=this;U(t)||(this._updateViewData(t,e.path,e.cursorPoint),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(t,e,s){const i=e.isValidPolygon,r=t.actualMeasurementMode==="geodesic",a=r?t.geodesicArea:t.area;let n=1;if(a){const d=this._toPreferredAreaUnit(a,this.analysisViewData.unit);n=Ht(Math.sqrt(d.value)/Math.sqrt(300)),n*=Math.sqrt(Kt(1,d.unit,"square-meters")),n/=t.unitNormalizer.normalizeDistance(1)}const h={validMeasurement:i,path:e,pathVersion:e.version,cursorPoint:s,measurementData:t,mode:t.actualMeasurementMode,positionsGeographic:t.positionsGeographic,positionsRenderCoords:t.positionsRenderCoords,positionsProjected:t.positionsProjectedWorldCoords,positionsFittedRenderCoords:t.positionsFittedRenderCoords,intersectingSegments:r?t.geodesicIntersectingSegments:t.intersectingSegments,triangleIndices:r?t.geodesicTriangleIndices:t.triangleIndices,fittingMode:t.fittingMode,areaCentroid:r?t.geodesicAreaCentroidRenderCoords:t.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:i?0:e.numVertices-2,perimeterLengthLabelSegmentIndex:0,checkerSize:n};this._set("viewData",h)}_updateOrigin(){const t=this.viewData;re(t.positionsRenderCoords,this._origin),Qt(this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(t){const e=this.viewData,s=e.path,i=this.view.renderCoordsHelper.spatialReference,r=e.mode,a=[],n=[],h=[],d=e.validMeasurement?s.numVertices:s.numVertices-1;for(let g=0;g<d;++g){const p=e[t][g],m=e[t][(g+1)%s.numVertices];let u=null;switch(r){case"euclidean":u=new ne(p,m);break;case"geodesic":u=new $e(p,m,i)}e.intersectingSegments.has(g)?h.push(u):n.push(u),a.push(u)}return{all:a,nonIntersecting:n,intersecting:h}}_updatePathSegments(){const{view:{renderCoordsHelper:t},viewData:e,visible:s}=this,i=this._createSegments("positionsRenderCoords"),{cursorPoint:r,mode:a,path:n}=e,h=!n.isValidPolygon,d=t.spatialReference;if(this._cursorSegment=null,n.numVertices>0&&h&&_(r)&&t.toRenderCoords(r,this._cursorPositionRenderSpace)){const g=e.positionsRenderCoords[n.numVertices-1],p=this._cursorPositionRenderSpace;let m=null;switch(a){case"euclidean":m=new ne(g,p);break;case"geodesic":m=new $e(g,p,d)}i.nonIntersecting.push(m),this._cursorSegment=m}this._path.setGeometryFromSegments(i.nonIntersecting,this._origin),this._path.visible=s,this._intersectedPath.setGeometryFromSegments(i.intersecting,this._origin),this._intersectedPath.visible=s,this._pathSegments=i.all}_updatePerimeterSegments(){const t=this.visible&&this.viewData.mode==="euclidean",e=this._createSegments("positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(e.nonIntersecting,this._origin),this._perimeter.visible=t,this._intersectedPerimeter.setGeometryFromSegments(e.intersecting,this._origin),this._intersectedPerimeter.visible=t,this._perimeterSegments=e.all}_updateArea(){const t=this.viewData;switch(t.mode){case"euclidean":this._updateAreaEuclidean(t);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(t){const e=this.visible;t.validMeasurement&&t.intersectingSegments.size===0&&t.triangleIndices?(this._measurementArea.geometry={uv:t.positionsProjected,position:t.positionsFittedRenderCoords,triangleIndices:t.triangleIndices},this._measurementArea.size=[t.checkerSize,t.checkerSize],this._measurementArea.visible=e):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const t=this.viewData,e=this.visible,s=t.path,i=t.mode;if(s.numVertices>0&&t.validMeasurement&&i==="euclidean"){const r=[];for(let a=0;a<s.numVertices;++a){const n=c();Q(n,t.positionsRenderCoords[a],this._origin);const h=c();Q(h,t.positionsFittedRenderCoords[a],this._origin),r.push([n,h])}this._projectionLines.geometry=r,this._projectionLines.visible=e}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const{viewData:t}=this,{measurementData:e,mode:s,path:i}=t;if(!i)return;const r=!i.isValidPolygon,a=this.visible,n=this._formatAreaLabel(this.messages,s==="geodesic"?e.geodesicArea:e.area,this.analysisViewData.unit);_(n)?(this._areaLabel.geometry={type:"point",point:t.areaCentroid},this._areaLabel.text=n,this._areaLabel.visible=t.validMeasurement&&t.intersectingSegments.size===0&&a):this._areaLabel.visible=!1,this._set("areaLabel",j(n));const h=this._formatLengthLabel(this.messages,s==="geodesic"?e.geodesicPathLength:e.pathLength,this.analysisViewData.unit);if(_(h)&&t.pathLengthLabelSegmentIndex>=0&&t.pathLengthLabelSegmentIndex<this._pathSegments.length){const u=this._pathSegments[t.pathLengthLabelSegmentIndex],f=_(this._cursorSegment)?this._cursorSegment:Ss;this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:"corner",left:u,right:f},this._pathLengthLabel.text=h,this._pathLengthLabel.visible=r&&i.numVertices>0&&a}else this._pathLengthLabel.visible=!1;const d=s==="geodesic"?t.measurementData.geodesicCursorSegmentLength:t.measurementData.cursorSegmentLength;if(_(d)){const u=this._formatLengthLabel(this.messages,d,this.analysisViewData.unit);this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=_(this._cursorSegment)?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null,this._cursorSegmentLengthLabel.anchor="bottom",this._cursorSegmentLengthLabel.text=j(u),this._cursorSegmentLengthLabel.visible=r&&d.value!==0&&a}else this._cursorSegmentLengthLabel.visible=!1;this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1);const g=t.mode==="geodesic",p=g?e.geodesicPathLength:e.perimeterLength,m=this._formatLengthLabel(this.messages,p,this.analysisViewData.unit);if(this._set("perimeterLengthLabel",j(m)),t.validMeasurement&&t.intersectingSegments.size===0){this._perimeterLengthLabel.distance=this._params.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=j(m),this._perimeterLengthLabel.visible=!0;let u=!0;for(let f=0;f<t.path.numVertices;++f){const C=(t.perimeterLengthLabelSegmentIndex+f)%t.path.numVertices,b=g?this._pathSegments[C]:this._perimeterSegments[C];if(u=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:b,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;u=!1}this._perimeterLengthLabel.visible=u&&a}else this._perimeterLengthLabel.visible=!1}_toPreferredAreaUnit(t,e){return is(t,this._preferredAreaUnit(t,e))}_preferredAreaUnit(t,e){switch(e){case"metric":return Zt(t.value,t.unit);case"imperial":return Xt(t.value,t.unit);default:return e}}_preferredLengthUnit(t,e){const s=this._deriveLengthUnitFromAreaUnit(e);switch(s){case"metric":return Jt(t.value,t.unit);case"imperial":return Yt(t.value,t.unit);default:return s}}_deriveLengthUnitFromAreaUnit(t){switch(t){case"metric":case"ares":case"hectares":return"metric";case"imperial":case"acres":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers"}throw new Error("unhandled area unit")}_formatAreaLabel(t,e,s){return t&&e&&Ae(t,e,this._preferredAreaUnit(e,s))}_formatLengthLabel(t,e,s){return t&&e&&Ae(t,e,this._preferredLengthUnit(e,s))}_updateMessageBundle(){this.loadingMessages=!0,es("esri/core/t9n/Units").then(t=>{this.messages=t,this.view&&this._update()}).finally(()=>{this.loadingMessages=!1})}};var O;o([l()],S.prototype,"view",void 0),o([l()],S.prototype,"messages",void 0),o([l()],S.prototype,"analysis",void 0),o([l()],S.prototype,"viewData",void 0),o([l()],S.prototype,"analysisViewData",void 0),o([l({readOnly:!0})],S.prototype,"areaLabel",void 0),o([l({readOnly:!0})],S.prototype,"perimeterLengthLabel",void 0),o([l()],S.prototype,"loadingMessages",void 0),o([l()],S.prototype,"visible",null),S=o([Z("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],S),function(t){t[t.Small=12]="Small",t[t.Large=16]="Large"}(O||(O={}));const vs={validMeasurement:!1,path:null,pathVersion:-1,cursorPoint:null,measurementData:null,mode:null,positionsGeographic:null,positionsRenderCoords:null,positionsProjected:null,positionsFittedRenderCoords:null,intersectingSegments:null,triangleIndices:null,fittingMode:null,areaCentroid:null,pathLengthLabelSegmentIndex:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null},Ss=new ne(c(),c());let L=class extends ss(ae){constructor(t){super(t),this.type="area-measurement-view-3d",this.analysis=null,this.measurementData=null,this.lastDraggedVertex=null,this.cursorPoint=null,this.mode=se.Auto}initialize(){const{analysis:t,view:e}=this;this.path=new A({view:e,areaMeasurement:t}),this.analysisVisualization=new S({view:e,analysis:t,analysisViewData:this}),this.analysisController=new D({view:e,analysis:t,analysisViewData:this})}destroy(){this.analysisController=v(this.analysisController),this.analysisVisualization=v(this.analysisVisualization),this.path.destroy()}get updating(){var t;return!!((t=this.analysisVisualization)!=null&&t.loadingMessages)}get result(){const{measurementData:t}=this;return U(t)?{area:null,mode:null,perimeter:null}:t.actualMeasurementMode==="euclidean"?{area:t.area,perimeter:t.perimeterLength,mode:"euclidean"}:{area:t.geodesicArea,perimeter:t.pathLength,mode:"geodesic"}}get viewData(){return this.analysisVisualization.viewData}get validMeasurement(){return this.path.isValidPolygon}get unit(){return Ge(this.analysis.unit,this._defaultUnit)}get testData(){return{visualization:this.analysisVisualization,controller:this.analysisController}}};o([l({readOnly:!0})],L.prototype,"type",void 0),o([l({constructOnly:!0,nonNullable:!0})],L.prototype,"analysis",void 0),o([l()],L.prototype,"updating",null),o([l()],L.prototype,"analysisVisualization",void 0),o([l()],L.prototype,"analysisController",void 0),o([l()],L.prototype,"result",null),o([l()],L.prototype,"measurementData",void 0),o([l()],L.prototype,"viewData",null),o([l()],L.prototype,"validMeasurement",null),o([l()],L.prototype,"path",void 0),o([l()],L.prototype,"lastDraggedVertex",void 0),o([l()],L.prototype,"cursorPoint",void 0),o([l()],L.prototype,"mode",void 0),o([l()],L.prototype,"unit",null),o([l(ts)],L.prototype,"_defaultUnit",void 0),L=o([Z("esri.views.3d.analysis.AreaMeasurementAnalysisView3D")],L);const ws=L;var Rs=Object.freeze(Object.defineProperty({__proto__:null,default:ws},Symbol.toStringTag,{value:"Module"}));export{Rs as A,cs as n};
