import{e1 as w,wG as b,wO as L,cc as I,wL as V}from"./index.a33ecea7.js";import{s as q,d as P}from"./cimAnalyzer.32b2260b.js";import{CIMSymbolRasterizer as D,GeometryStyle as x}from"./CIMSymbolRasterizer.cf01a59c.js";import"./fontUtils.401be2b9.js";import"./BidiEngine.8d79ab2c.js";import"./GeometryUtils.b33f0569.js";import"./alignmentUtils.cba6cd73.js";import"./definitions.618cbc79.js";import"./number.e821bc3e.js";import"./Rect.85ff00e1.js";import"./CIMResourceManager.989a7154.js";import"./Rasterizer.dd2845f9.js";import"./_commonjsHelpers.557d737c.js";import"./rasterizingUtils.a4b9dda6.js";import"./imageutils.5e5bb181.js";const g=new D(null,!0),m=w(b.size),F=w(b.maxSize),E=w(b.lineWidth),k=1;function A(e){const t=e==null?void 0:e.size;return typeof t=="number"?{width:t,height:t}:{width:t!=null&&typeof t=="object"&&"width"in t?t.width:null,height:t!=null&&typeof t=="object"&&"height"in t?t.height:null}}async function et(e,t={}){var G;const{node:M,opacity:v,symbolConfig:h}=t,O=typeof h=="object"&&"isSquareFill"in h&&h.isSquareFill,S=t.cimOptions||t,o=S.geometryType||L((G=e==null?void 0:e.data)==null?void 0:G.symbol),i=A(t),{feature:C,fieldMap:z}=S;if(i.width==null||i.height==null){const r=await q.resolveSymbolOverrides(e.data,C,null,z,o);if(!r)return null;(e=e.clone()).data={type:"CIMSymbolReference",symbol:r},e.data.primitiveOverrides=void 0;const y=[];P.fetchResources(r,g.resourceManager,y),y.length>0&&await Promise.all(y);const n=P.getEnvelope(r,null,g.resourceManager),d=n==null?void 0:n.width,f=n==null?void 0:n.height;i.width=o==="esriGeometryPolygon"?m:o==="esriGeometryPolyline"?E:d!=null&&isFinite(d)?Math.min(d,F):m,i.height=o==="esriGeometryPolygon"?m:f!=null&&isFinite(f)?Math.max(Math.min(f,F),k):m}const c=await g.rasterizeCIMSymbolAsync(e,C,i,O||o!=="esriGeometryPolygon"?x.Preview:x.Legend,z,o);if(!c)return null;const{width:j,height:R}=c,l=document.createElement("canvas");l.width=j,l.height=R,l.getContext("2d").putImageData(c,0,0);const p=I(i.width),u=I(i.height),s=new Image(p,u);s.src=l.toDataURL(),v!=null&&(s.style.opacity=`${v}`);let a=s;if(t.effectView!=null){const r={shape:{type:"image",x:0,y:0,width:p,height:u,src:s.src},fill:null,stroke:null,offset:[0,0]};a=V([[r]],[p,u],{effectView:t.effectView})}return M&&a&&M.appendChild(a),a}export{et as previewCIMSymbol};
