import{pS as v,pT as g,pU as m,pV as w,pW as _,pX as f,jl as T,r as p,aD as S,dk as I,by as d,pY as b,pI as D,bp as c,a4 as h,e as o,y as s,g7 as O,pZ as E,p_ as $,b as A,A as j}from"./index.a33ecea7.js";let a=class extends v(g(m(w(_(j))))){constructor(...e){super(...e),this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=f()}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}destroy(){this._lercDecoder=T(this._lercDecoder)}readVersion(e,i){let t=i.currentVersion;return t||(t=9.3),t}load(e){const i=p(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:t=>{for(let r=0;r<t.typeKeywords.length;r++)if(t.typeKeywords[r].toLowerCase()==="elevation 3d layer")return!0;throw new S("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(I).then(()=>this._fetchImageService(i))),Promise.resolve(this)}fetchTile(e,i,t,r){const l=p((r=r||{signal:null}).signal)?r.signal:r.signal=new AbortController().signal,y={responseType:"array-buffer",signal:l},u={noDataValue:r.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(e,i,t,r)).then(()=>d(this.getTileUrl(e,i,t),y)).then(n=>this._lercDecoder.decode(n.data,u,l)).then(n=>new b(n))}getTileUrl(e,i,t){const r=!this.tilemapCache&&this.supportsBlankTile,l=D({...this.parsedUrl.query,blankTile:!r&&null});return`${this.parsedUrl.path}/tile/${e}/${i}/${t}${l?"?"+l:""}`}async queryElevation(e,i){const{ElevationQuery:t}=await c(()=>import("./index.a33ecea7.js").then(function(r){return r.zT}),["assets/index.a33ecea7.js","assets/index.56d92a5e.css"]);return h(i),new t().query(this,e,i)}async createElevationSampler(e,i){const{ElevationQuery:t}=await c(()=>import("./index.a33ecea7.js").then(function(r){return r.zT}),["assets/index.a33ecea7.js","assets/index.56d92a5e.css"]);return h(i),new t().createSampler(this,e,i)}_fetchTileAvailability(e,i,t,r){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,i,t,r):Promise.resolve("unknown")}async _fetchImageService(e){var r;if(this.sourceJSON)return this.sourceJSON;const i={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},t=await d(this.parsedUrl.path,i);t.ssl&&(this.url=(r=this.url)==null?void 0:r.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};o([s({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),o([s({readOnly:!0,type:E})],a.prototype,"heightModelInfo",void 0),o([s({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],a.prototype,"path",void 0),o([s({type:["show","hide"]})],a.prototype,"listMode",void 0),o([s({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"minScale",void 0),o([s({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"maxScale",void 0),o([s({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],a.prototype,"opacity",void 0),o([s({type:["ArcGISTiledElevationServiceLayer"]})],a.prototype,"operationalLayerType",void 0),o([s()],a.prototype,"sourceJSON",void 0),o([s({json:{read:!1},value:"elevation",readOnly:!0})],a.prototype,"type",void 0),o([s($)],a.prototype,"url",void 0),o([s()],a.prototype,"version",void 0),o([O("version",["currentVersion"])],a.prototype,"readVersion",null),a=o([A("esri.layers.ElevationLayer")],a),a.prototype.fetchTile.__isDefault__=!0;const U=a;export{U as default};
